#!/usr/bin/env python3
"""
Bengali and Hindi Viral Seasonal Flu Symptom Checker Module

This module provides specialized functionality for checking viral seasonal flu symptoms 
in Bengali and Hindi languages, with appropriate medical guidance and management advice.
"""

import re
from typing import Dict, List, Set, Tuple, Optional
from datetime import datetime
import logging

from config.medical_constants import ViralFluConstants
from src.rag_system.query_processor import MedicalQueryProcessor

logger = logging.getLogger(__name__)

class BengaliViralFluChecker:
    """Bengali language viral flu symptom checker with medical guidance."""
    
    def __init__(self):
        self.flu_constants = ViralFluConstants()
        self.query_processor = MedicalQueryProcessor()
        
    def detect_language(self, text: str) -> str:
        """Detect if the text is in Bengali language."""
        bengali_chars = set('ржЕржЖржЗржИржЙржКржЛржПржРржУржФржХржЦржЧржШржЩржЪржЫржЬржЭржЮржЯржаржбржвржгрждржержжржзржиржкржлржмржнржоржпрж░рж▓рж╢рж╖рж╕рж╣ржбрж╝ржврж╝ржпрж╝рзОржВ')
        text_chars = set(text)
        bengali_count = len(text_chars.intersection(bengali_chars))
        total_chars = len([c for c in text if c.isalpha()])
        
        if total_chars == 0:
            return "unknown"
        
        bengali_ratio = bengali_count / total_chars
        return "bengali" if bengali_ratio > 0.3 else "other"
    
    def extract_flu_symptoms(self, bengali_text: str) -> List[str]:
        """Extract viral flu symptoms from Bengali text."""
        symptoms_found = []
        text_lower = bengali_text.lower()
        
        for bengali_symptom, english_symptom in self.flu_constants.BENGALI_FLU_SYMPTOMS.items():
            if bengali_symptom in text_lower:
                symptoms_found.append(english_symptom)
                logger.info(f"Found flu symptom: {bengali_symptom} -> {english_symptom}")
        
        return list(set(symptoms_found))
    
    def assess_flu_severity(self, symptoms: List[str]) -> Dict[str, any]:
        """Assess the severity level of viral flu symptoms."""
        emergency_count = 0
        warning_count = 0
        common_count = 0
        
        emergency_symptoms = []
        warning_symptoms = []
        common_symptoms = []
        
        for symptom in symptoms:
            if symptom in self.flu_constants.EMERGENCY_SYMPTOMS:
                emergency_count += 1
                emergency_symptoms.append(symptom)
            elif symptom in self.flu_constants.WARNING_SYMPTOMS:
                warning_count += 1
                warning_symptoms.append(symptom)
            elif symptom in self.flu_constants.COMMON_SYMPTOMS:
                common_count += 1
                common_symptoms.append(symptom)
        
        # Determine severity level - Flu specific logic
        if emergency_count > 0:
            severity = "emergency"
            confidence = 0.95
        elif warning_count >= 3 or (warning_count >= 2 and "high fever" in symptoms):
            severity = "severe_flu"
            confidence = 0.85
        elif warning_count >= 2 or (warning_count >= 1 and common_count >= 3):
            severity = "moderate_flu"
            confidence = 0.75
        elif common_count >= 4 or (common_count >= 3 and "fever" in symptoms):
            severity = "typical_flu"
            confidence = 0.70
        elif common_count >= 2:
            severity = "mild_flu"
            confidence = 0.60
        elif common_count >= 1:
            severity = "possible_cold"
            confidence = 0.45
        else:
            severity = "unclear"
            confidence = 0.30
        
        return {
            "severity": severity,
            "confidence": confidence,
            "emergency_symptoms": emergency_symptoms,
            "warning_symptoms": warning_symptoms,
            "common_symptoms": common_symptoms,
            "total_symptoms": len(symptoms)
        }
    
    def generate_bengali_response(self, assessment: Dict[str, any], symptoms: List[str]) -> Dict[str, str]:
        """Generate appropriate Bengali response based on assessment."""
        severity = assessment["severity"]
        
        if severity == "emergency":
            response = self._generate_emergency_response_bengali(assessment, symptoms)
        elif severity == "severe_flu":
            response = self._generate_severe_flu_response_bengali(assessment, symptoms)
        elif severity == "moderate_flu":
            response = self._generate_moderate_flu_response_bengali(assessment, symptoms)
        elif severity == "typical_flu":
            response = self._generate_typical_flu_response_bengali(assessment, symptoms)
        elif severity == "mild_flu":
            response = self._generate_mild_flu_response_bengali(assessment, symptoms)
        elif severity == "possible_cold":
            response = self._generate_cold_response_bengali(assessment, symptoms)
        else:
            response = self._generate_general_response_bengali(assessment, symptoms)
        
        return response
    
    def _generate_emergency_response_bengali(self, assessment: Dict, symptoms: List[str]) -> Dict[str, str]:
        """Generate emergency response in Bengali."""
        return {
            "severity": "emergency",
            "title": "ЁЯЪи ржЬрж░рзБрж░рж┐ ржЪрж┐ржХрж┐рзОрж╕рж╛ ржкрзНрж░ржпрж╝рзЛржЬржи",
            "message": f"""ржЖржкржирж╛рж░ ржмрж░рзНржгрж┐ржд рж▓ржХрзНрж╖ржгржЧрзБрж▓рж┐ ржЧрзБрж░рзБрждрж░ ржнрж╛ржЗрж░рж╛рж▓ рж╕ржВржХрзНрж░ржоржг ржмрж╛ ржЬржЯрж┐рж▓рждрж╛рж░ ржЗржЩрзНржЧрж┐ржд ржжрж┐ржЪрзНржЫрзЗред

ЁЯЪи рждрж╛рзОржХрзНрж╖ржгрж┐ржХ ржХрж░ржгрзАржпрж╝:
тАв ржЕржмрж┐рж▓ржорзНржмрзЗ ржирж┐ржХржЯрж╕рзНрже рж╣рж╛рж╕ржкрж╛рждрж╛рж▓рзЗ ржпрж╛ржи
тАв ржЬрж░рзБрж░рж┐ ржмрж┐ржнрж╛ржЧрзЗ ржпрзЛржЧрж╛ржпрзЛржЧ ржХрж░рзБржи
тАв рж╢рзНржмрж╛рж╕ржпржирзНрждрзНрж░рзЗрж░ рж╕ржорж╕рзНржпрж╛ рж╣рж▓рзЗ ржЕрзНржпрж╛ржорзНржмрзБрж▓рзЗржирзНрж╕ ржбрж╛ржХрзБржи

ржмрж┐ржкржЬрзНржЬржиржХ рж▓ржХрзНрж╖ржгрж╕ржорзВрж╣:
{', '.join(assessment['emergency_symptoms'])}

тЪая╕П ржмрж┐рж╢рзЗрж╖ рж╕рждрж░рзНржХрждрж╛:
тАв ржкрж╛ржирж┐рж╢рзВржирзНржпрждрж╛ рж░рзЛржзрзЗ рждрж░рж▓ ржЦрж╛ржмрж╛рж░ ржЦрзЗрждрзЗ ржерж╛ржХрзБржи
тАв рж╢рзНржмрж╛рж╕ржХрж╖рзНржЯ рж╣рж▓рзЗ ржмрж╕рзЗ ржерж╛ржХрзБржи, рж╢рзБржпрж╝рзЗ ржерж╛ржХржмрзЗржи ржирж╛""",
            "disclaimer": self.flu_constants.BENGALI_FLU_DISCLAIMERS["emergency"],
            "confidence": f"{assessment['confidence']*100:.0f}%"
        }
    
    def _generate_severe_flu_response_bengali(self, assessment: Dict, symptoms: List[str]) -> Dict[str, str]:
        """Generate severe flu response in Bengali."""
        return {
            "severity": "severe_flu",
            "title": "тЪая╕П ржЧрзБрж░рзБрждрж░ ржнрж╛ржЗрж░рж╛рж▓ ржлрзНрж▓рзБ",
            "message": f"""ржЖржкржирж╛рж░ рж▓ржХрзНрж╖ржгржЧрзБрж▓рж┐ ржЧрзБрж░рзБрждрж░ ржнрж╛ржЗрж░рж╛рж▓ ржлрзНрж▓рзБрж░ ржЗржЩрзНржЧрж┐ржд ржжрж┐ржЪрзНржЫрзЗред

тЪая╕П ржЬрж░рзБрж░рж┐ ржкржжржХрзНрж╖рзЗржк:
тАв ржЖржЬржЗ ржбрж╛ржХрзНрждрж╛рж░ ржжрзЗржЦрж╛ржи
тАв ржкрзНрж░ржпрж╝рзЛржЬржирзЗ рж╣рж╛рж╕ржкрж╛рждрж╛рж▓рзЗ ржнрж░рзНрждрж┐ рж╣рждрзЗ рж╣рждрзЗ ржкрж╛рж░рзЗ
тАв рж╕ржорзНржкрзВрж░рзНржг ржмрж┐рж╢рзНрж░рж╛ржо ржирж┐ржи

ржЧрзБрж░рзБрждрж░ рж▓ржХрзНрж╖ржгрж╕ржорзВрж╣:
{', '.join(assessment['warning_symptoms'])}

ЁЯПе ржЪрж┐ржХрж┐рзОрж╕рж╛ ржкрж░рж╛ржорж░рзНрж╢:
тАв ржбрж╛ржХрзНрждрж╛рж░рзЗрж░ ржкрж░рж╛ржорж░рзНрж╢ ржЫрж╛ржбрж╝рж╛ ржХрзЛржирзЛ ржУрж╖рзБржз ржЦрж╛ржмрзЗржи ржирж╛
тАв ржЬрзНржмрж░ ржХржорж╛ржирзЛрж░ ржЬржирзНржп ржкрзНржпрж╛рж░рж╛рж╕рж┐ржЯрж╛ржорж▓ ржЦрзЗрждрзЗ ржкрж╛рж░рзЗржи
тАв ржкрзНрж░ржЪрзБрж░ ржкрж╛ржирж┐ ржУ рждрж░рж▓ ржЦрж╛ржмрж╛рж░ ржЦрж╛ржи

ЁЯФ╕ рж╕ржВржХрзНрж░ржоржг ржкрзНрж░рждрж┐рж░рзЛржзрзЗ:
тАв ржорж╛рж╕рзНржХ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи
тАв ржЕржирзНржпржжрзЗрж░ ржХрж╛ржЫ ржерзЗржХрзЗ ржжрзВрж░рждрзНржм ржмржЬрж╛ржпрж╝ рж░рж╛ржЦрзБржи
тАв рж╣рж╛ржд ржирж┐ржпрж╝ржорж┐ржд ржзрзБржпрж╝рзЗ рж░рж╛ржЦрзБржи""",
            "disclaimer": self.flu_constants.BENGALI_FLU_DISCLAIMERS["warning"],
            "confidence": f"{assessment['confidence']*100:.0f}%"
        }
    
    def _generate_moderate_flu_response_bengali(self, assessment: Dict, symptoms: List[str]) -> Dict[str, str]:
        """Generate moderate flu response in Bengali."""
        return {
            "severity": "moderate_flu",
            "title": "ЁЯдТ ржорж╛ржЭрж╛рж░рж┐ ржорж╛рждрзНрж░рж╛рж░ ржнрж╛ржЗрж░рж╛рж▓ ржлрзНрж▓рзБ",
            "message": f"""ржЖржкржирж╛рж░ рж▓ржХрзНрж╖ржгржЧрзБрж▓рж┐ ржорж╛ржЭрж╛рж░рж┐ ржорж╛рждрзНрж░рж╛рж░ ржнрж╛ржЗрж░рж╛рж▓ ржлрзНрж▓рзБрж░ рж╕рж╛ржерзЗ рж╕рж╛ржоржЮрзНржЬрж╕рзНржпржкрзВрж░рзНржгред

ЁЯУЛ ржкрж░рж╛ржорж░рзНрж╢:
тАв рзи-рзй ржжрж┐ржирзЗрж░ ржоржзрзНржпрзЗ ржбрж╛ржХрзНрждрж╛рж░ ржжрзЗржЦрж╛ржи
тАв ржкрзВрж░рзНржг ржмрж┐рж╢рзНрж░рж╛ржо ржирж┐ржи (рзл-рзн ржжрж┐ржи)
тАв ржХрж╛ржЬ/рж╕рзНржХрзБрж▓ ржерзЗржХрзЗ ржЫрзБржЯрж┐ ржирж┐ржи

ржмрж░рзНрждржорж╛ржи рж▓ржХрзНрж╖ржгрж╕ржорзВрж╣:
рж╕рждрж░рзНржХрждрж╛ржорзВрж▓ржХ: {', '.join(assessment['warning_symptoms'])}
рж╕рж╛ржзрж╛рж░ржг: {', '.join(assessment['common_symptoms'])}

ЁЯТК ржШрж░рзЛржпрж╝рж╛ ржЪрж┐ржХрж┐рзОрж╕рж╛:
тАв ржЬрзНржмрж░рзЗрж░ ржЬржирзНржп ржкрзНржпрж╛рж░рж╛рж╕рж┐ржЯрж╛ржорж▓ (рзм-рзо ржШржирзНржЯрж╛ ржкрж░ржкрж░)
тАв ржЧрж▓рж╛ ржмрзНржпржерж╛рж░ ржЬржирзНржп ржЧрж░ржо ржкрж╛ржирж┐рждрзЗ рж▓ржмржг ржжрж┐ржпрж╝рзЗ ржЧрж╛рж░рзНржЧрж▓
тАв ржХрж╛рж╢рж┐рж░ ржЬржирзНржп ржоржзрзБ ржУ ржЖржжрж╛рж░ ржЪрж╛
тАв ржкрзНрж░ржЪрзБрж░ рждрж░рж▓ ржЦрж╛ржмрж╛рж░ (ржкрж╛ржирж┐, рж╕рзНржпрзБржк, ржбрж╛ржмрзЗрж░ ржкрж╛ржирж┐)

ЁЯФ╕ ржирж┐рж░рзАржХрзНрж╖ржг ржХрж░рзБржи:
тАв ржЬрзНржмрж░ рззрзжрзк┬░F ржПрж░ ржЙржкрж░рзЗ ржЧрзЗрж▓рзЗ рждрж╛рзОржХрзНрж╖ржгрж┐ржХ ржбрж╛ржХрзНрждрж╛рж░ ржжрзЗржЦрж╛ржи
тАв рж╢рзНржмрж╛рж╕ржХрж╖рзНржЯ ржмрж╛ржбрж╝рж▓рзЗ ржжрзЗрж░рж┐ ржХрж░ржмрзЗржи ржирж╛
тАв рзн ржжрж┐ржирзЗ ржЙржирзНржирждрж┐ ржирж╛ рж╣рж▓рзЗ ржЖржмрж╛рж░ ржбрж╛ржХрзНрждрж╛рж░ ржжрзЗржЦрж╛ржи""",
            "disclaimer": self.flu_constants.BENGALI_FLU_DISCLAIMERS["warning"],
            "confidence": f"{assessment['confidence']*100:.0f}%"
        }
    
    def _generate_typical_flu_response_bengali(self, assessment: Dict, symptoms: List[str]) -> Dict[str, str]:
        """Generate typical flu response in Bengali."""
        return {
            "severity": "typical_flu",
            "title": "ЁЯдз рж╕рж╛ржзрж╛рж░ржг ржнрж╛ржЗрж░рж╛рж▓ ржлрзНрж▓рзБ",
            "message": f"""ржЖржкржирж╛рж░ рж▓ржХрзНрж╖ржгржЧрзБрж▓рж┐ рж╕рж╛ржзрж╛рж░ржг ржнрж╛ржЗрж░рж╛рж▓ ржлрзНрж▓рзБрж░ ржорждрзЛред

ЁЯТб ржкрж░рж┐ржЪрж░рзНржпрж╛:
тАв рзл-рзн ржжрж┐ржи ржмрж┐рж╢рзНрж░рж╛ржо ржирж┐ржи
тАв ржкрзНрж░ржпрж╝рзЛржЬржирзЗ ржбрж╛ржХрзНрждрж╛рж░ ржжрзЗржЦрж╛ржи
тАв ржЕржирзНржпржжрзЗрж░ рж╕ржВржХрзНрж░ржоржг ржерзЗржХрзЗ рж░ржХрзНрж╖рж╛ ржХрж░рзБржи

рж╕рж╛ржзрж╛рж░ржг рж▓ржХрзНрж╖ржгрж╕ржорзВрж╣:
{', '.join(assessment['common_symptoms'])}

ЁЯПа ржШрж░рзЛржпрж╝рж╛ ржкрж░рж┐ржЪрж░рзНржпрж╛:
тАв ржкрж░рзНржпрж╛ржкрзНржд ржШрзБржо (рзо-рззрзж ржШржирзНржЯрж╛)
тАв ржкрзНрж░ржЪрзБрж░ рждрж░рж▓ ржЦрж╛ржмрж╛рж░ ржЦрж╛ржи
тАв ржкрзБрж╖рзНржЯрж┐ржХрж░ ржЦрж╛ржмрж╛рж░ ржЦрж╛ржи (ржнрж┐ржЯрж╛ржорж┐ржи рж╕рж┐ ржпрзБржХрзНржд ржлрж▓)
тАв рж╣рж╛рж▓ржХрж╛ ржЧрж░ржо ржЦрж╛ржмрж╛рж░ ржУ ржкрж╛ржирзАржпрж╝

ЁЯТК ржЙржкрж╕рж░рзНржЧ ржирж┐ржпрж╝ржирзНрждрзНрж░ржг:
тАв ржЬрзНржмрж░: ржкрзНржпрж╛рж░рж╛рж╕рж┐ржЯрж╛ржорж▓
тАв ржЧрж▓рж╛ ржмрзНржпржерж╛: ржЧрж░ржо ржкрж╛ржирж┐рждрзЗ рж▓ржмржг
тАв ржХрж╛рж╢рж┐: ржоржзрзБ ржУ рждрзБрж▓рж╕рзА ржкрж╛рждрж╛
тАв ржирж╛ржХ ржмржирзНржз: ржмрж╛рж╖рзНржк ржирж┐ржи

тЪая╕П рж╕рждрж░рзНржХрждрж╛ - ржПржЗ рж▓ржХрзНрж╖ржг ржжрзЗржЦрж╛ ржжрж┐рж▓рзЗ ржбрж╛ржХрзНрждрж╛рж░ ржжрзЗржЦрж╛ржи:
тАв рззрзжрзй┬░F ржПрж░ ржЙржкрж░рзЗ ржЬрзНржмрж░
тАв рждрзАржмрзНрж░ рж╢рзНржмрж╛рж╕ржХрж╖рзНржЯ
тАв ржмрзБржХрзЗ ржмрзНржпржерж╛
тАв ржЕрждрж┐рж░рж┐ржХрзНржд ржжрзБрж░рзНржмрж▓рждрж╛""",
            "disclaimer": self.flu_constants.BENGALI_FLU_DISCLAIMERS["general"],
            "confidence": f"{assessment['confidence']*100:.0f}%"
        }
    
    def _generate_mild_flu_response_bengali(self, assessment: Dict, symptoms: List[str]) -> Dict[str, str]:
        """Generate mild flu response in Bengali."""
        return {
            "severity": "mild_flu",
            "title": "ЁЯдз рж╣рж╛рж▓ржХрж╛ ржнрж╛ржЗрж░рж╛рж▓ ржлрзНрж▓рзБ",
            "message": f"""ржЖржкржирж╛рж░ рж▓ржХрзНрж╖ржгржЧрзБрж▓рж┐ рж╣рж╛рж▓ржХрж╛ ржнрж╛ржЗрж░рж╛рж▓ ржлрзНрж▓рзБ ржмрж╛ рж╕рж░рзНржжрж┐-ржХрж╛рж╢рж┐рж░ ржорждрзЛред

ЁЯТЪ рж╕рзБржЦржмрж░: рж╕рж╛ржзрж╛рж░ржгржд рзй-рзл ржжрж┐ржирзЗ ржнрж╛рж▓рзЛ рж╣ржпрж╝рзЗ ржпрж╛ржмрзЗ

ржмрж░рзНрждржорж╛ржи рж▓ржХрзНрж╖ржгрж╕ржорзВрж╣: {', '.join(assessment['common_symptoms'])}

ЁЯПа ржШрж░рзЛржпрж╝рж╛ ржкрж░рж┐ржЪрж░рзНржпрж╛:
тАв ржкрж░рзНржпрж╛ржкрзНржд ржмрж┐рж╢рзНрж░рж╛ржо ржирж┐ржи
тАв ржкрзНрж░ржЪрзБрж░ ржкрж╛ржирж┐ ржкрж╛ржи ржХрж░рзБржи
тАв ржЧрж░ржо ржЪрж╛, рж╕рзНржпрзБржк ржЦрж╛ржи
тАв ржнрж┐ржЯрж╛ржорж┐ржи рж╕рж┐ ржпрзБржХрзНржд ржЦрж╛ржмрж╛рж░ ржЦрж╛ржи

ЁЯТК ржкрзНрж░рж╛ржХрзГрждрж┐ржХ ржкрзНрж░рждрж┐ржХрж╛рж░:
тАв ржЖржжрж╛-ржоржзрзБрж░ ржЪрж╛
тАв рждрзБрж▓рж╕рзА ржкрж╛рждрж╛рж░ рж░рж╕
тАв рж▓рзЗржмрзБ-ржоржзрзБ ржЧрж░ржо ржкрж╛ржирж┐рждрзЗ
тАв рж╣рж▓рзБржж-ржжрзБржз рж░рж╛рждрзЗ

ЁЯФ╕ ржкрзНрж░рждрж┐рж░рзЛржз ржмрзНржпржмрж╕рзНржерж╛:
тАв рж╣рж╛ржд ржирж┐ржпрж╝ржорж┐ржд ржзрзБржпрж╝рзЗ рж░рж╛ржЦрзБржи
тАв ржЯрж┐рж╕рзНржпрзБ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи
тАв ржорж╛рж╕рзНржХ ржкрж░рзБржи
тАв ржнрж┐ржбрж╝ ржПржбрж╝рж┐ржпрж╝рзЗ ржЪрж▓рзБржи

тЪая╕П ржбрж╛ржХрзНрждрж╛рж░ ржжрзЗржЦрж╛ржи ржпржжрж┐:
тАв рзй ржжрж┐ржирзЗ ржЙржирзНржирждрж┐ ржирж╛ рж╣ржпрж╝
тАв ржЬрзНржмрж░ ржмрж╛ржбрж╝рждрзЗ ржерж╛ржХрзЗ
тАв ржирждрзБржи рж▓ржХрзНрж╖ржг ржжрзЗржЦрж╛ ржжрзЗржпрж╝""",
            "disclaimer": self.flu_constants.BENGALI_FLU_DISCLAIMERS["general"],
            "confidence": f"{assessment['confidence']*100:.0f}%"
        }
    
    def _generate_cold_response_bengali(self, assessment: Dict, symptoms: List[str]) -> Dict[str, str]:
        """Generate common cold response in Bengali."""
        return {
            "severity": "possible_cold",
            "title": "ЁЯдз рж╕рж╛ржзрж╛рж░ржг рж╕рж░рзНржжрж┐-ржХрж╛рж╢рж┐",
            "message": f"""ржЖржкржирж╛рж░ рж▓ржХрзНрж╖ржгржЧрзБрж▓рж┐ рж╕рж╛ржзрж╛рж░ржг рж╕рж░рзНржжрж┐-ржХрж╛рж╢рж┐рж░ ржорждрзЛред

ЁЯТЪ ржнрж╛рж▓рзЛ ржЦржмрж░: рж╕рж╛ржзрж╛рж░ржгржд рзи-рзк ржжрж┐ржирзЗ ржнрж╛рж▓рзЛ рж╣ржпрж╝рзЗ ржпрж╛ржмрзЗ

ржмрж░рзНрждржорж╛ржи рж▓ржХрзНрж╖ржгрж╕ржорзВрж╣: {', '.join(symptoms)}

ЁЯПа рж╕рж╣ржЬ ржкрзНрж░рждрж┐ржХрж╛рж░:
тАв ржкрж░рзНржпрж╛ржкрзНржд ржШрзБржо ржУ ржмрж┐рж╢рзНрж░рж╛ржо
тАв ржЧрж░ржо ржкрж╛ржирж┐, ржЪрж╛, рж╕рзНржпрзБржк
тАв ржоржзрзБ ржУ рж▓рзЗржмрзБрж░ рж╢рж░ржмржд
тАв ржмрж╛рж╖рзНржк ржирж┐ржи (ржЧрж░ржо ржкрж╛ржирж┐рждрзЗ ржорзБржЦ ржжрж┐ржпрж╝рзЗ)

ЁЯМ┐ ржкрзНрж░рж╛ржХрзГрждрж┐ржХ ржЙржкрж╛ржжрж╛ржи:
тАв ржЖржжрж╛ ржЪрж╛
тАв рждрзБрж▓рж╕рзА ржкрж╛рждрж╛
тАв ржоржзрзБ
тАв рж▓рзЗржмрзБ

ЁЯТб ржжрзНрж░рзБржд рж╕рзБрж╕рзНржерждрж╛рж░ ржЬржирзНржп:
тАв ржкрзНрж░ржЪрзБрж░ рждрж░рж▓ ржЦрж╛ржмрж╛рж░ ржЦрж╛ржи
тАв рж╣рж╛рж▓ржХрж╛ ржЧрж░ржо ржЦрж╛ржмрж╛рж░ ржЦрж╛ржи
тАв ржзрзВржоржкрж╛ржи ржПржбрж╝рж┐ржпрж╝рзЗ ржЪрж▓рзБржи
тАв ржкрж░рзНржпрж╛ржкрзНржд ржнрж┐ржЯрж╛ржорж┐ржи рж╕рж┐ ржирж┐ржи

ЁЯФ╕ ржХржЦржи ржЪрж┐ржХрж┐рзОрж╕ржХрзЗрж░ ржкрж░рж╛ржорж░рзНрж╢ ржирзЗржмрзЗржи:
тАв рзл ржжрж┐ржирзЗржУ ржнрж╛рж▓рзЛ ржирж╛ рж╣рж▓рзЗ
тАв ржЬрзНржмрж░ ржПрж▓рзЗ
тАв ржЧрж▓рж╛ ржмрзНржпржерж╛ ржмрж╛ржбрж╝рж▓рзЗ""",
            "disclaimer": self.flu_constants.BENGALI_FLU_DISCLAIMERS["general"],
            "confidence": f"{assessment['confidence']*100:.0f}%"
        }
    
    def _generate_general_response_bengali(self, assessment: Dict, symptoms: List[str]) -> Dict[str, str]:
        """Generate general health response in Bengali."""
        return {
            "severity": "general",
            "title": "ЁЯПе рж╕рзНржмрж╛рж╕рзНржерзНржп ржкрж░рж╛ржорж░рзНрж╢",
            "message": f"""ржЖржкржирж╛рж░ ржЙрж▓рзНрж▓рзЗржЦрж┐ржд рж▓ржХрзНрж╖ржгржЧрзБрж▓рж┐ ржмрж┐ржнрж┐ржирзНржи ржХрж╛рж░ржгрзЗ рж╣рждрзЗ ржкрж╛рж░рзЗред

ЁЯТб рж╕рж╛ржзрж╛рж░ржг ржкрж░рж╛ржорж░рзНрж╢:
тАв ржкрж░рзНржпрж╛ржкрзНржд ржмрж┐рж╢рзНрж░рж╛ржо ржирж┐ржи
тАв ржкрзНрж░ржЪрзБрж░ рждрж░рж▓ ржЦрж╛ржмрж╛рж░ ржЦрж╛ржи
тАв ржкрзБрж╖рзНржЯрж┐ржХрж░ ржЦрж╛ржмрж╛рж░ ржЦрж╛ржи
тАв ржкрзНрж░ржпрж╝рзЛржЬржирзЗ ржбрж╛ржХрзНрждрж╛рж░ ржжрзЗржЦрж╛ржи

ржмрж░рзНрждржорж╛ржи рж▓ржХрзНрж╖ржгрж╕ржорзВрж╣: {', '.join(symptoms)}

ЁЯФ╕ рж╕рж╛ржзрж╛рж░ржг рж╕рзНржмрж╛рж╕рзНржерзНржпржмрж┐ржзрж┐:
тАв ржирж┐ржпрж╝ржорж┐ржд рж╣рж╛ржд ржзрзЛржпрж╝рж╛
тАв рж╕рзНржмрж╛рж╕рзНржерзНржпржХрж░ ржЦрж╛ржжрзНржпрж╛ржнрзНржпрж╛рж╕
тАв ржкрж░рзНржпрж╛ржкрзНржд ржШрзБржо
тАв ржирж┐ржпрж╝ржорж┐ржд ржмрзНржпрж╛ржпрж╝рж╛ржо

тЪая╕П ржПржЗ рж▓ржХрзНрж╖ржг ржжрзЗржЦрж╛ ржжрж┐рж▓рзЗ ржбрж╛ржХрзНрждрж╛рж░ ржжрзЗржЦрж╛ржи:
тАв ржЬрзНржмрж░ (рззрзжрзз┬░F ржПрж░ ржЙржкрж░рзЗ)
тАв рждрзАржмрзНрж░ ржорж╛ржерж╛ржмрзНржпржерж╛
тАв рж╢рзНржмрж╛рж╕ржХрж╖рзНржЯ
тАв ржЕржмрзНржпрж╛рж╣ржд ржмржорж┐""",
            "disclaimer": self.flu_constants.BENGALI_FLU_DISCLAIMERS["general"],
            "confidence": f"{assessment['confidence']*100:.0f}%"
        }

    def check_viral_flu_symptoms_bengali(self, bengali_query: str) -> Dict[str, any]:
        """Main function to check viral flu symptoms from Bengali text."""
        
        # Validate input
        if not bengali_query or not bengali_query.strip():
            return {
                "error": "ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржЖржкржирж╛рж░ рж▓ржХрзНрж╖ржгржЧрзБрж▓рж┐ ржмрж░рзНржгржирж╛ ржХрж░рзБржи",
                "language": "bengali"
            }
        
        # Detect language
        language = self.detect_language(bengali_query)
        if language != "bengali":
            return {
                "error": "ржжржпрж╝рж╛ ржХрж░рзЗ ржмрж╛ржВрж▓рж╛ржпрж╝ ржЖржкржирж╛рж░ рж▓ржХрзНрж╖ржгржЧрзБрж▓рж┐ рж▓рж┐ржЦрзБржи",
                "language": language
            }
        
        try:
            # Extract symptoms
            symptoms = self.extract_flu_symptoms(bengali_query)
            
            if not symptoms:
                return {
                    "severity": "unclear",
                    "title": "ЁЯдФ рж▓ржХрзНрж╖ржг рж╕рзНржкрж╖рзНржЯ ржиржпрж╝",
                    "message": "ржЖржкржирж╛рж░ ржмрж░рзНржгржирж╛ ржерзЗржХрзЗ рж╕рзНржкрж╖рзНржЯ рж▓ржХрзНрж╖ржг ржмрзБржЭрждрзЗ ржкрж╛рж░рж┐ржирж┐ред ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржЖрж░ржУ ржмрж┐рж╕рзНрждрж╛рж░рж┐ржд ржмрж▓рзБржиред",
                    "disclaimer": self.flu_constants.BENGALI_FLU_DISCLAIMERS["general"],
                    "symptoms": [],
                    "confidence": "0%"
                }
            
            # Assess severity
            assessment = self.assess_flu_severity(symptoms)
            
            # Generate response
            response = self.generate_bengali_response(assessment, symptoms)
            
            # Add metadata
            response.update({
                "symptoms": symptoms,
                "language": "bengali",
                "timestamp": datetime.now().isoformat(),
                "total_symptoms_found": len(symptoms)
            })
            
            logger.info(f"Processed Bengali flu query: {len(symptoms)} symptoms found, severity: {assessment['severity']}")
            
            return response
            
        except Exception as e:
            logger.error(f"Error processing Bengali flu query: {e}")
            return {
                "error": "ржкрзНрж░ржХрзНрж░рж┐ржпрж╝рж╛ржХрж░ржгрзЗ рж╕ржорж╕рзНржпрж╛ рж╣ржпрж╝рзЗржЫрзЗред ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред",
                "language": "bengali"
            }

class HindiViralFluChecker:
    """Hindi language viral flu symptom checker with medical guidance."""
    
    def __init__(self):
        self.flu_constants = ViralFluConstants()
        self.query_processor = MedicalQueryProcessor()
    
    def detect_language(self, text: str) -> str:
        """Detect if the text is in Hindi language."""
        hindi_chars = set('рдЕрдЖрдЗрдИрдЙрдКрдЛрдПрдРрдУрдФрдХрдЦрдЧрдШрдЩрдЪрдЫрдЬрдЭрдЮрдЯрдардбрдврдгрддрдерджрдзрдирдкрдлрдмрднрдордпрд░рд▓рд╡рд╢рд╖рд╕рд╣')
        text_chars = set(text)
        hindi_count = len(text_chars.intersection(hindi_chars))
        total_chars = len([c for c in text if c.isalpha()])
        
        if total_chars == 0:
            return "unknown"
        
        hindi_ratio = hindi_count / total_chars
        return "hindi" if hindi_ratio > 0.3 else "other"
    
    def extract_flu_symptoms(self, hindi_text: str) -> List[str]:
        """Extract viral flu symptoms from Hindi text."""
        symptoms_found = []
        text_lower = hindi_text.lower()
        
        for hindi_symptom, english_symptom in self.flu_constants.HINDI_FLU_SYMPTOMS.items():
            if hindi_symptom in text_lower:
                symptoms_found.append(english_symptom)
                logger.info(f"Found flu symptom: {hindi_symptom} -> {english_symptom}")
        
        return list(set(symptoms_found))
    
    def assess_flu_severity(self, symptoms: List[str]) -> Dict[str, any]:
        """Assess the severity level of viral flu symptoms."""
        emergency_count = 0
        warning_count = 0
        common_count = 0
        
        emergency_symptoms = []
        warning_symptoms = []
        common_symptoms = []
        
        for symptom in symptoms:
            if symptom in self.flu_constants.EMERGENCY_SYMPTOMS:
                emergency_count += 1
                emergency_symptoms.append(symptom)
            elif symptom in self.flu_constants.WARNING_SYMPTOMS:
                warning_count += 1
                warning_symptoms.append(symptom)
            elif symptom in self.flu_constants.COMMON_SYMPTOMS:
                common_count += 1
                common_symptoms.append(symptom)
        
        # Determine severity level - Flu specific logic
        if emergency_count > 0:
            severity = "emergency"
            confidence = 0.95
        elif warning_count >= 3 or (warning_count >= 2 and "high fever" in symptoms):
            severity = "severe_flu"
            confidence = 0.85
        elif warning_count >= 2 or (warning_count >= 1 and common_count >= 3):
            severity = "moderate_flu"
            confidence = 0.75
        elif common_count >= 4 or (common_count >= 3 and "fever" in symptoms):
            severity = "typical_flu"
            confidence = 0.70
        elif common_count >= 2:
            severity = "mild_flu"
            confidence = 0.60
        elif common_count >= 1:
            severity = "possible_cold"
            confidence = 0.45
        else:
            severity = "unclear"
            confidence = 0.30
        
        return {
            "severity": severity,
            "confidence": confidence,
            "emergency_symptoms": emergency_symptoms,
            "warning_symptoms": warning_symptoms,
            "common_symptoms": common_symptoms,
            "total_symptoms": len(symptoms)
        }
    
    def generate_hindi_response(self, assessment: Dict[str, any], symptoms: List[str]) -> Dict[str, str]:
        """Generate appropriate Hindi response based on assessment."""
        severity = assessment["severity"]
        
        if severity == "emergency":
            response = self._generate_emergency_response_hindi(assessment, symptoms)
        elif severity == "severe_flu":
            response = self._generate_severe_flu_response_hindi(assessment, symptoms)
        elif severity == "moderate_flu":
            response = self._generate_moderate_flu_response_hindi(assessment, symptoms)
        elif severity == "typical_flu":
            response = self._generate_typical_flu_response_hindi(assessment, symptoms)
        elif severity == "mild_flu":
            response = self._generate_mild_flu_response_hindi(assessment, symptoms)
        elif severity == "possible_cold":
            response = self._generate_cold_response_hindi(assessment, symptoms)
        else:
            response = self._generate_general_response_hindi(assessment, symptoms)
        
        return response
    
    def _generate_emergency_response_hindi(self, assessment: Dict, symptoms: List[str]) -> Dict[str, str]:
        """Generate emergency response in Hindi."""
        return {
            "severity": "emergency",
            "title": "ЁЯЪи рддрддреНрдХрд╛рд▓ рдЪрд┐рдХрд┐рддреНрд╕рд╛ рд╕рд╣рд╛рдпрддрд╛ рдЖрд╡рд╢реНрдпрдХ",
            "message": f"""рдЖрдкрдХреЗ рдмрддрд╛рдП рдЧрдП рд▓рдХреНрд╖рдг рдЧрдВрднреАрд░ рд╡рд╛рдпрд░рд▓ рд╕рдВрдХреНрд░рдордг рдпрд╛ рдЬрдЯрд┐рд▓рддрд╛рдУрдВ рдХрд╛ рд╕рдВрдХреЗрдд рджреЗ рд░рд╣реЗ рд╣реИрдВред

ЁЯЪи рддреБрд░рдВрдд рдХрд░реЗрдВ:
тАв рдирдЬрджреАрдХреА рдЕрд╕реНрдкрддрд╛рд▓ рдЬрд╛рдПрдВ
тАв рдЗрдорд░рдЬреЗрдВрд╕реА рд╡рд┐рднрд╛рдЧ рд╕реЗ рд╕рдВрдкрд░реНрдХ рдХрд░реЗрдВ
тАв рд╕рд╛рдВрд╕ рдХреА рд╕рдорд╕реНрдпрд╛ рд╣реЛ рддреЛ рдПрдореНрдмреБрд▓реЗрдВрд╕ рдмреБрд▓рд╛рдПрдВ

рдЦрддрд░рдирд╛рдХ рд▓рдХреНрд╖рдг:
{', '.join(assessment['emergency_symptoms'])}

тЪая╕П рд╡рд┐рд╢реЗрд╖ рд╕рд╛рд╡рдзрд╛рдиреА:
тАв рдкрд╛рдиреА рдХреА рдХрдореА рд░реЛрдХрдиреЗ рдХреЗ рд▓рд┐рдП рддрд░рд▓ рдкрджрд╛рд░реНрде рд▓реЗрддреЗ рд░рд╣реЗрдВ
тАв рд╕рд╛рдВрд╕ рдлреВрд▓реЗ рддреЛ рдмреИрдардХрд░ рд░рд╣реЗрдВ, рд▓реЗрдЯреЗрдВ рдирд╣реАрдВ""",
            "disclaimer": self.flu_constants.HINDI_FLU_DISCLAIMERS["emergency"],
            "confidence": f"{assessment['confidence']*100:.0f}%"
        }
    
    def _generate_severe_flu_response_hindi(self, assessment: Dict, symptoms: List[str]) -> Dict[str, str]:
        """Generate severe flu response in Hindi."""
        return {
            "severity": "severe_flu",
            "title": "тЪая╕П рдЧрдВрднреАрд░ рд╡рд╛рдпрд░рд▓ рдлреНрд▓реВ",
            "message": f"""рдЖрдкрдХреЗ рд▓рдХреНрд╖рдг рдЧрдВрднреАрд░ рд╡рд╛рдпрд░рд▓ рдлреНрд▓реВ рдХрд╛ рд╕рдВрдХреЗрдд рджреЗ рд░рд╣реЗ рд╣реИрдВред

тЪая╕П рдЬрд░реВрд░реА рдХрджрдо:
тАв рдЖрдЬ рд╣реА рдбреЙрдХреНрдЯрд░ рд╕реЗ рдорд┐рд▓реЗрдВ
тАв рдЬрд░реВрд░рдд рдкрдбрд╝реЗ рддреЛ рдЕрд╕реНрдкрддрд╛рд▓ рдореЗрдВ рднрд░реНрддреА рд╣реЛ рд╕рдХрддреЗ рд╣реИрдВ
тАв рдкреВрд░реНрдг рдЖрд░рд╛рдо рдХрд░реЗрдВ

рдЧрдВрднреАрд░ рд▓рдХреНрд╖рдг:
{', '.join(assessment['warning_symptoms'])}

ЁЯПе рдЪрд┐рдХрд┐рддреНрд╕рд╛ рд╕рд▓рд╛рд╣:
тАв рдбреЙрдХреНрдЯрд░ рдХреА рд╕рд▓рд╛рд╣ рдХреЗ рдмрд┐рдирд╛ рдХреЛрдИ рджрд╡рд╛ рди рд▓реЗрдВ
тАв рдмреБрдЦрд╛рд░ рдХреЗ рд▓рд┐рдП рдкреИрд░рд╛рд╕рд┐рдЯрд╛рдореЛрд▓ рд▓реЗ рд╕рдХрддреЗ рд╣реИрдВ
тАв рднрд░рдкреВрд░ рдкрд╛рдиреА рдФрд░ рддрд░рд▓ рдкрджрд╛рд░реНрде рд▓реЗрдВ

ЁЯФ╕ рд╕рдВрдХреНрд░рдордг рд░реЛрдХрдерд╛рдо рдХреЗ рд▓рд┐рдП:
тАв рдорд╛рд╕реНрдХ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ
тАв рджреВрд╕рд░реЛрдВ рд╕реЗ рджреВрд░реА рдмрдирд╛рдП рд░рдЦреЗрдВ
тАв рд╣рд╛рде рдирд┐рдпрдорд┐рдд рд░реВрдк рд╕реЗ рдзреЛрдПрдВ""",
            "disclaimer": self.flu_constants.HINDI_FLU_DISCLAIMERS["warning"],
            "confidence": f"{assessment['confidence']*100:.0f}%"
        }
    
    def _generate_moderate_flu_response_hindi(self, assessment: Dict, symptoms: List[str]) -> Dict[str, str]:
        """Generate moderate flu response in Hindi."""
        return {
            "severity": "moderate_flu",
            "title": "ЁЯдТ рдордзреНрдпрдо рджрд░реНрдЬреЗ рдХрд╛ рд╡рд╛рдпрд░рд▓ рдлреНрд▓реВ",
            "message": f"""рдЖрдкрдХреЗ рд▓рдХреНрд╖рдг рдордзреНрдпрдо рджрд░реНрдЬреЗ рдХреЗ рд╡рд╛рдпрд░рд▓ рдлреНрд▓реВ рд╕реЗ рдореЗрд▓ рдЦрд╛рддреЗ рд╣реИрдВред

ЁЯУЛ рд╕рд▓рд╛рд╣:
тАв 2-3 рджрд┐рди рдореЗрдВ рдбреЙрдХреНрдЯрд░ рд╕реЗ рдорд┐рд▓реЗрдВ
тАв рдкреВрд░реНрдг рдЖрд░рд╛рдо рдХрд░реЗрдВ (5-7 рджрд┐рди)
тАв рдХрд╛рдо/рд╕реНрдХреВрд▓ рд╕реЗ рдЫреБрдЯреНрдЯреА рд▓реЗрдВ

рд╡рд░реНрддрдорд╛рди рд▓рдХреНрд╖рдг:
рдЪреЗрддрд╛рд╡рдиреА рд╡рд╛рд▓реЗ: {', '.join(assessment['warning_symptoms'])}
рд╕рд╛рдорд╛рдиреНрдп: {', '.join(assessment['common_symptoms'])}

ЁЯТК рдШрд░реЗрд▓реВ рдЗрд▓рд╛рдЬ:
тАв рдмреБрдЦрд╛рд░ рдХреЗ рд▓рд┐рдП рдкреИрд░рд╛рд╕рд┐рдЯрд╛рдореЛрд▓ (6-8 рдШрдВрдЯреЗ рдмрд╛рдж)
тАв рдЧрд▓реЗ рдХреЗ рджрд░реНрдж рдХреЗ рд▓рд┐рдП рдирдордХ рдХреЗ рдкрд╛рдиреА рд╕реЗ рдЧрд░рд╛рд░реЗ
тАв рдЦрд╛рдВрд╕реА рдХреЗ рд▓рд┐рдП рд╢рд╣рдж рдФрд░ рдЕрджрд░рдХ рдХреА рдЪрд╛рдп
тАв рднрд░рдкреВрд░ рддрд░рд▓ рдкрджрд╛рд░реНрде (рдкрд╛рдиреА, рд╕реВрдк, рдирд╛рд░рд┐рдпрд▓ рдкрд╛рдиреА)

ЁЯФ╕ рдирд┐рдЧрд░рд╛рдиреА рдХрд░реЗрдВ:
тАв рдмреБрдЦрд╛рд░ 104┬░F рд╕реЗ рдКрдкрд░ рдЬрд╛рдП рддреЛ рддреБрд░рдВрдд рдбреЙрдХреНрдЯрд░ рджрд┐рдЦрд╛рдПрдВ
тАв рд╕рд╛рдВрд╕ рдлреВрд▓рдиреЗ рд▓рдЧреЗ рддреЛ рджреЗрд░реА рди рдХрд░реЗрдВ
тАв 7 рджрд┐рди рдореЗрдВ рд╕реБрдзрд╛рд░ рди рд╣реЛ рддреЛ рдлрд┐рд░ рдбреЙрдХреНрдЯрд░ рджрд┐рдЦрд╛рдПрдВ""",
            "disclaimer": self.flu_constants.HINDI_FLU_DISCLAIMERS["warning"],
            "confidence": f"{assessment['confidence']*100:.0f}%"
        }
    
    def _generate_typical_flu_response_hindi(self, assessment: Dict, symptoms: List[str]) -> Dict[str, str]:
        """Generate typical flu response in Hindi."""
        return {
            "severity": "typical_flu",
            "title": "ЁЯдз рд╕рд╛рдорд╛рдиреНрдп рд╡рд╛рдпрд░рд▓ рдлреНрд▓реВ",
            "message": f"""рдЖрдкрдХреЗ рд▓рдХреНрд╖рдг рд╕рд╛рдорд╛рдиреНрдп рд╡рд╛рдпрд░рд▓ рдлреНрд▓реВ рдЬреИрд╕реЗ рд╣реИрдВред

ЁЯТб рджреЗрдЦрднрд╛рд▓:
тАв 5-7 рджрд┐рди рдЖрд░рд╛рдо рдХрд░реЗрдВ
тАв рдЬрд░реВрд░рдд рдкрдбрд╝реЗ рддреЛ рдбреЙрдХреНрдЯрд░ рджрд┐рдЦрд╛рдПрдВ
тАв рджреВрд╕рд░реЛрдВ рдХреЛ рд╕рдВрдХреНрд░рдордг рд╕реЗ рдмрдЪрд╛рдПрдВ

рд╕рд╛рдорд╛рдиреНрдп рд▓рдХреНрд╖рдг:
{', '.join(assessment['common_symptoms'])}

ЁЯПа рдШрд░реЗрд▓реВ рджреЗрдЦрднрд╛рд▓:
тАв рдкрд░реНрдпрд╛рдкреНрдд рдиреАрдВрдж (8-10 рдШрдВрдЯреЗ)
тАв рднрд░рдкреВрд░ рддрд░рд▓ рдкрджрд╛рд░реНрде рд▓реЗрдВ
тАв рдкреМрд╖реНрдЯрд┐рдХ рднреЛрдЬрди (рд╡рд┐рдЯрд╛рдорд┐рди рд╕реА рд╡рд╛рд▓реЗ рдлрд▓)
тАв рд╣рд▓реНрдХреЗ рдЧрд░реНрдо рдЦрд╛рдирд╛ рдФрд░ рдкреЗрдп

ЁЯТК рд▓рдХреНрд╖рдг рдирд┐рдпрдВрддреНрд░рдг:
тАв рдмреБрдЦрд╛рд░: рдкреИрд░рд╛рд╕рд┐рдЯрд╛рдореЛрд▓
тАв рдЧрд▓реЗ рдХрд╛ рджрд░реНрдж: рдирдордХ рдХреЗ рдкрд╛рдиреА рд╕реЗ рдЧрд░рд╛рд░реЗ
тАв рдЦрд╛рдВрд╕реА: рд╢рд╣рдж рдФрд░ рддреБрд▓рд╕реА
тАв рдирд╛рдХ рдмрдВрдж: рднрд╛рдк рд▓реЗрдВ

тЪая╕П рд╕рд╛рд╡рдзрд╛рдиреА - рдпреЗ рд▓рдХреНрд╖рдг рджрд┐рдЦреЗрдВ рддреЛ рдбреЙрдХреНрдЯрд░ рджрд┐рдЦрд╛рдПрдВ:
тАв 103┬░F рд╕реЗ рдКрдкрд░ рдмреБрдЦрд╛рд░
тАв рддреЗрдЬ рд╕рд╛рдВрд╕ рдлреВрд▓рдирд╛
тАв рдЫрд╛рддреА рдореЗрдВ рджрд░реНрдж
тАв рдЕрддреНрдпрдзрд┐рдХ рдХрдордЬреЛрд░реА""",
            "disclaimer": self.flu_constants.HINDI_FLU_DISCLAIMERS["general"],
            "confidence": f"{assessment['confidence']*100:.0f}%"
        }
    
    def _generate_mild_flu_response_hindi(self, assessment: Dict, symptoms: List[str]) -> Dict[str, str]:
        """Generate mild flu response in Hindi."""
        return {
            "severity": "mild_flu",
            "title": "ЁЯдз рд╣рд▓реНрдХрд╛ рд╡рд╛рдпрд░рд▓ рдлреНрд▓реВ",
            "message": f"""рдЖрдкрдХреЗ рд▓рдХреНрд╖рдг рд╣рд▓реНрдХреЗ рд╡рд╛рдпрд░рд▓ рдлреНрд▓реВ рдпрд╛ рд╕рд░реНрджреА-рдЦрд╛рдВрд╕реА рдЬреИрд╕реЗ рд╣реИрдВред

ЁЯТЪ рдЕрдЪреНрдЫреА рдЦрдмрд░: рдЖрдорддреМрд░ рдкрд░ 3-5 рджрд┐рди рдореЗрдВ рдареАрдХ рд╣реЛ рдЬрд╛рдПрдЧрд╛

рд╡рд░реНрддрдорд╛рди рд▓рдХреНрд╖рдг: {', '.join(assessment['common_symptoms'])}

ЁЯПа рдШрд░реЗрд▓реВ рджреЗрдЦрднрд╛рд▓:
тАв рдкрд░реНрдпрд╛рдкреНрдд рдЖрд░рд╛рдо рдХрд░реЗрдВ
тАв рднрд░рдкреВрд░ рдкрд╛рдиреА рдкрд┐рдПрдВ
тАв рдЧрд░реНрдо рдЪрд╛рдп, рд╕реВрдк рд▓реЗрдВ
тАв рд╡рд┐рдЯрд╛рдорд┐рди рд╕реА рд╡рд╛рд▓рд╛ рднреЛрдЬрди рд▓реЗрдВ

ЁЯТК рдкреНрд░рд╛рдХреГрддрд┐рдХ рдЙрдкрдЪрд╛рд░:
тАв рдЕрджрд░рдХ-рд╢рд╣рдж рдХреА рдЪрд╛рдп
тАв рддреБрд▓рд╕реА рдХреЗ рдкрддреНрддреЗ рдХрд╛ рд░рд╕
тАв рдиреАрдВрдмреВ-рд╢рд╣рдж рдЧрд░реНрдо рдкрд╛рдиреА рдореЗрдВ
тАв рд╣рд▓реНрджреА-рджреВрдз рд░рд╛рдд рдХреЛ

ЁЯФ╕ рдмрдЪрд╛рд╡ рдХреЗ рдЙрдкрд╛рдп:
тАв рд╣рд╛рде рдирд┐рдпрдорд┐рдд рд░реВрдк рд╕реЗ рдзреЛрдПрдВ
тАв рдЯрд┐рд╕реНрдпреВ рдХрд╛ рдЗрд╕реНрддреЗрдорд╛рд▓ рдХрд░реЗрдВ
тАв рдорд╛рд╕реНрдХ рдкрд╣рдиреЗрдВ
тАв рднреАрдбрд╝ рд╕реЗ рдмрдЪреЗрдВ

тЪая╕П рдбреЙрдХреНрдЯрд░ рджрд┐рдЦрд╛рдПрдВ рдЕрдЧрд░:
тАв 3 рджрд┐рди рдореЗрдВ рд╕реБрдзрд╛рд░ рди рд╣реЛ
тАв рдмреБрдЦрд╛рд░ рдмрдврд╝рддрд╛ рдЬрд╛рдП
тАв рдирдП рд▓рдХреНрд╖рдг рджрд┐рдЦреЗрдВ""",
            "disclaimer": self.flu_constants.HINDI_FLU_DISCLAIMERS["general"],
            "confidence": f"{assessment['confidence']*100:.0f}%"
        }
    
    def _generate_cold_response_hindi(self, assessment: Dict, symptoms: List[str]) -> Dict[str, str]:
        """Generate common cold response in Hindi."""
        return {
            "severity": "possible_cold",
            "title": "ЁЯдз рд╕рд╛рдорд╛рдиреНрдп рд╕рд░реНрджреА-рдЦрд╛рдВрд╕реА",
            "message": f"""рдЖрдкрдХреЗ рд▓рдХреНрд╖рдг рд╕рд╛рдорд╛рдиреНрдп рд╕рд░реНрджреА-рдЦрд╛рдВрд╕реА рдЬреИрд╕реЗ рд╣реИрдВред

ЁЯТЪ рдЕрдЪреНрдЫреА рдЦрдмрд░: рдЖрдорддреМрд░ рдкрд░ 2-4 рджрд┐рди рдореЗрдВ рдареАрдХ рд╣реЛ рдЬрд╛рдПрдЧрд╛

рд╡рд░реНрддрдорд╛рди рд▓рдХреНрд╖рдг: {', '.join(symptoms)}

ЁЯПа рдЖрд╕рд╛рди рдЙрдкрд╛рдп:
тАв рдкрд░реНрдпрд╛рдкреНрдд рдиреАрдВрдж рдФрд░ рдЖрд░рд╛рдо
тАв рдЧрд░реНрдо рдкрд╛рдиреА, рдЪрд╛рдп, рд╕реВрдк
тАв рд╢рд╣рдж рдФрд░ рдиреАрдВрдмреВ рдХрд╛ рд╢рд░рдмрдд
тАв рднрд╛рдк рд▓реЗрдВ (рдЧрд░реНрдо рдкрд╛рдиреА рдореЗрдВ рдореБрдВрд╣ рдХрд░рдХреЗ)

ЁЯМ┐ рдкреНрд░рд╛рдХреГрддрд┐рдХ рд╕рд╛рдордЧреНрд░реА:
тАв рдЕрджрд░рдХ рдХреА рдЪрд╛рдп
тАв рддреБрд▓рд╕реА рдХреЗ рдкрддреНрддреЗ
тАв рд╢рд╣рдж
тАв рдиреАрдВрдмреВ

ЁЯТб рдЬрд▓реНрджреА рдареАрдХ рд╣реЛрдиреЗ рдХреЗ рд▓рд┐рдП:
тАв рднрд░рдкреВрд░ рддрд░рд▓ рдкрджрд╛рд░реНрде рд▓реЗрдВ
тАв рд╣рд▓реНрдХрд╛ рдЧрд░реНрдо рдЦрд╛рдирд╛ рдЦрд╛рдПрдВ
тАв рдзреВрдореНрд░рдкрд╛рди рд╕реЗ рдмрдЪреЗрдВ
тАв рдкрд░реНрдпрд╛рдкреНрдд рд╡рд┐рдЯрд╛рдорд┐рди рд╕реА рд▓реЗрдВ

ЁЯФ╕ рдХрдм рдбреЙрдХреНрдЯрд░ рдХреА рд╕рд▓рд╛рд╣ рд▓реЗрдВ:
тАв 5 рджрд┐рди рдореЗрдВ рднреА рдареАрдХ рди рд╣реЛ
тАв рдмреБрдЦрд╛рд░ рдЖ рдЬрд╛рдП
тАв рдЧрд▓реЗ рдХрд╛ рджрд░реНрдж рдмрдврд╝ рдЬрд╛рдП""",
            "disclaimer": self.flu_constants.HINDI_FLU_DISCLAIMERS["general"],
            "confidence": f"{assessment['confidence']*100:.0f}%"
        }
    
    def _generate_general_response_hindi(self, assessment: Dict, symptoms: List[str]) -> Dict[str, str]:
        """Generate general health response in Hindi."""
        return {
            "severity": "general",
            "title": "ЁЯПе рд╕реНрд╡рд╛рд╕реНрдереНрдп рд╕рд▓рд╛рд╣",
            "message": f"""рдЖрдкрдХреЗ рдмрддрд╛рдП рдЧрдП рд▓рдХреНрд╖рдг рд╡рд┐рднрд┐рдиреНрди рдХрд╛рд░рдгреЛрдВ рд╕реЗ рд╣реЛ рд╕рдХрддреЗ рд╣реИрдВред

ЁЯТб рд╕рд╛рдорд╛рдиреНрдп рд╕рд▓рд╛рд╣:
тАв рдкрд░реНрдпрд╛рдкреНрдд рдЖрд░рд╛рдо рдХрд░реЗрдВ
тАв рднрд░рдкреВрд░ рддрд░рд▓ рдкрджрд╛рд░реНрде рд▓реЗрдВ
тАв рдкреМрд╖реНрдЯрд┐рдХ рднреЛрдЬрди рд▓реЗрдВ
тАв рдЬрд░реВрд░рдд рдкрдбрд╝реЗ рддреЛ рдбреЙрдХреНрдЯрд░ рджрд┐рдЦрд╛рдПрдВ

рд╡рд░реНрддрдорд╛рди рд▓рдХреНрд╖рдг: {', '.join(symptoms)}

ЁЯФ╕ рд╕рд╛рдорд╛рдиреНрдп рд╕реНрд╡рд╛рд╕реНрдереНрдп рдирд┐рдпрдо:
тАв рдирд┐рдпрдорд┐рдд рд╣рд╛рде рдзреЛрдирд╛
тАв рд╕реНрд╡рд╕реНрде рдЦрд╛рди-рдкрд╛рди
тАв рдкрд░реНрдпрд╛рдкреНрдд рдиреАрдВрдж
тАв рдирд┐рдпрдорд┐рдд рд╡реНрдпрд╛рдпрд╛рдо

тЪая╕П рдпреЗ рд▓рдХреНрд╖рдг рджрд┐рдЦреЗрдВ рддреЛ рдбреЙрдХреНрдЯрд░ рджрд┐рдЦрд╛рдПрдВ:
тАв рдмреБрдЦрд╛рд░ (101┬░F рд╕реЗ рдКрдкрд░)
тАв рддреЗрдЬ рд╕рд┐рд░ рджрд░реНрдж
тАв рд╕рд╛рдВрд╕ рдлреВрд▓рдирд╛
тАв рд▓рдЧрд╛рддрд╛рд░ рдЙрд▓реНрдЯреА""",
            "disclaimer": self.flu_constants.HINDI_FLU_DISCLAIMERS["general"],
            "confidence": f"{assessment['confidence']*100:.0f}%"
        }

    def check_viral_flu_symptoms_hindi(self, hindi_query: str) -> Dict[str, any]:
        """Main function to check viral flu symptoms from Hindi text."""
        
        # Validate input
        if not hindi_query or not hindi_query.strip():
            return {
                "error": "рдХреГрдкрдпрд╛ рдЕрдкрдиреЗ рд▓рдХреНрд╖рдгреЛрдВ рдХрд╛ рд╡рд░реНрдгрди рдХрд░реЗрдВ",
                "language": "hindi"
            }
        
        # Detect language
        language = self.detect_language(hindi_query)
        if language != "hindi":
            return {
                "error": "рдХреГрдкрдпрд╛ рд╣рд┐рдВрджреА рдореЗрдВ рдЕрдкрдиреЗ рд▓рдХреНрд╖рдг рд▓рд┐рдЦреЗрдВ",
                "language": language
            }
        
        try:
            # Extract symptoms
            symptoms = self.extract_flu_symptoms(hindi_query)
            
            if not symptoms:
                return {
                    "severity": "unclear",
                    "title": "ЁЯдФ рд▓рдХреНрд╖рдг рд╕реНрдкрд╖реНрдЯ рдирд╣реАрдВ",
                    "message": "рдЖрдкрдХреЗ рд╡рд┐рд╡рд░рдг рд╕реЗ рд╕реНрдкрд╖реНрдЯ рд▓рдХреНрд╖рдг рд╕рдордЭ рдирд╣реАрдВ рдЖрдПред рдХреГрдкрдпрд╛ рдФрд░ рд╡рд┐рд╕реНрддрд╛рд░ рд╕реЗ рдмрддрд╛рдПрдВред",
                    "disclaimer": self.flu_constants.HINDI_FLU_DISCLAIMERS["general"],
                    "symptoms": [],
                    "confidence": "0%"
                }
            
            # Assess severity
            assessment = self.assess_flu_severity(symptoms)
            
            # Generate response
            response = self.generate_hindi_response(assessment, symptoms)
            
            # Add metadata
            response.update({
                "symptoms": symptoms,
                "language": "hindi",
                "timestamp": datetime.now().isoformat(),
                "total_symptoms_found": len(symptoms)
            })
            
            logger.info(f"Processed Hindi flu query: {len(symptoms)} symptoms found, severity: {assessment['severity']}")
            
            return response
            
        except Exception as e:
            logger.error(f"Error processing Hindi flu query: {e}")
            return {
                "error": "рдкреНрд░рд╕рдВрд╕реНрдХрд░рдг рдореЗрдВ рд╕рдорд╕реНрдпрд╛ рд╣реБрдИред рдХреГрдкрдпрд╛ рдлрд┐рд░ рд╕реЗ рдХреЛрд╢рд┐рд╢ рдХрд░реЗрдВред",
                "language": "hindi"
            }
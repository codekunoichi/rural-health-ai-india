#!/usr/bin/env python3
"""
Bengali and Hindi Tuberculosis Symptom Checker Module

This module provides specialized functionality for checking tuberculosis symptoms 
in Bengali and Hindi languages, with appropriate medical guidance and safety measures.
"""

import re
from typing import Dict, List, Set, Tuple, Optional
from datetime import datetime
import logging

from config.medical_constants import TuberculosisConstants
from src.rag_system.query_processor import MedicalQueryProcessor

logger = logging.getLogger(__name__)

class BengaliTuberculosisChecker:
    """Bengali language tuberculosis symptom checker with medical safety protocols."""
    
    def __init__(self):
        self.tb_constants = TuberculosisConstants()
        self.query_processor = MedicalQueryProcessor()
        
    def detect_language(self, text: str) -> str:
        """Detect if the text is in Bengali language."""
        bengali_chars = set('ржЕржЖржЗржИржЙржКржЛржПржРржУржФржХржЦржЧржШржЩржЪржЫржЬржЭржЮржЯржаржбржвржгрждржержжржзржиржкржлржмржнржоржпрж░рж▓рж╢рж╖рж╕рж╣ржбрж╝ржврж╝ржпрж╝рзОржВ')
        text_chars = set(text)
        bengali_count = len(text_chars.intersection(bengali_chars))
        total_chars = len([c for c in text if c.isalpha()])
        
        if total_chars == 0:
            return "unknown"
        
        bengali_ratio = bengali_count / total_chars
        return "bengali" if bengali_ratio > 0.3 else "other"
    
    def extract_tb_symptoms(self, bengali_text: str) -> List[str]:
        """Extract tuberculosis symptoms from Bengali text."""
        symptoms_found = []
        text_lower = bengali_text.lower()
        
        for bengali_symptom, english_symptom in self.tb_constants.BENGALI_TB_SYMPTOMS.items():
            if bengali_symptom in text_lower:
                symptoms_found.append(english_symptom)
                logger.info(f"Found TB symptom: {bengali_symptom} -> {english_symptom}")
        
        return list(set(symptoms_found))
    
    def assess_tb_severity(self, symptoms: List[str]) -> Dict[str, any]:
        """Assess the severity level of tuberculosis symptoms."""
        emergency_count = 0
        warning_count = 0
        early_count = 0
        
        emergency_symptoms = []
        warning_symptoms = []
        early_symptoms = []
        
        for symptom in symptoms:
            if symptom in self.tb_constants.EMERGENCY_SYMPTOMS:
                emergency_count += 1
                emergency_symptoms.append(symptom)
            elif symptom in self.tb_constants.WARNING_SYMPTOMS:
                warning_count += 1
                warning_symptoms.append(symptom)
            elif symptom in self.tb_constants.EARLY_SYMPTOMS:
                early_count += 1
                early_symptoms.append(symptom)
        
        # Determine severity level - TB specific logic
        if emergency_count > 0:
            severity = "emergency"
            confidence = 0.95
        elif warning_count >= 3 or (warning_count >= 2 and early_count >= 1):
            severity = "high_suspicion"
            confidence = 0.85
        elif warning_count >= 2 or (warning_count >= 1 and early_count >= 2):
            severity = "suspected"
            confidence = 0.75
        elif early_count >= 3 or (early_count >= 2 and "persistent cough" in symptoms):
            severity = "possible"
            confidence = 0.65
        elif early_count >= 1:
            severity = "monitor"
            confidence = 0.45
        else:
            severity = "unclear"
            confidence = 0.30
        
        return {
            "severity": severity,
            "confidence": confidence,
            "emergency_symptoms": emergency_symptoms,
            "warning_symptoms": warning_symptoms,
            "early_symptoms": early_symptoms,
            "total_symptoms": len(symptoms)
        }
    
    def generate_bengali_response(self, assessment: Dict[str, any], symptoms: List[str]) -> Dict[str, str]:
        """Generate appropriate Bengali response based on assessment."""
        severity = assessment["severity"]
        
        if severity == "emergency":
            response = self._generate_emergency_response_bengali(assessment, symptoms)
        elif severity == "high_suspicion":
            response = self._generate_high_suspicion_response_bengali(assessment, symptoms)
        elif severity == "suspected":
            response = self._generate_suspected_response_bengali(assessment, symptoms)
        elif severity == "possible":
            response = self._generate_possible_response_bengali(assessment, symptoms)
        elif severity == "monitor":
            response = self._generate_monitor_response_bengali(assessment, symptoms)
        else:
            response = self._generate_general_response_bengali(assessment, symptoms)
        
        return response
    
    def _generate_emergency_response_bengali(self, assessment: Dict, symptoms: List[str]) -> Dict[str, str]:
        """Generate emergency response in Bengali."""
        return {
            "severity": "emergency",
            "title": "ЁЯЪи ржЬрж░рзБрж░рж┐ ржЪрж┐ржХрж┐рзОрж╕рж╛ ржкрзНрж░ржпрж╝рзЛржЬржи",
            "message": f"""ржЖржкржирж╛рж░ ржмрж░рзНржгрж┐ржд рж▓ржХрзНрж╖ржгржЧрзБрж▓рж┐ ржЧрзБрж░рзБрждрж░ ржпржХрзНрж╖рзНржорж╛ ржмрж╛ ржЬржЯрж┐рж▓рждрж╛рж░ ржЗржЩрзНржЧрж┐ржд ржжрж┐ржЪрзНржЫрзЗред

ЁЯЪи рждрж╛рзОржХрзНрж╖ржгрж┐ржХ ржХрж░ржгрзАржпрж╝:
тАв ржЕржмрж┐рж▓ржорзНржмрзЗ ржирж┐ржХржЯрж╕рзНрже рж╣рж╛рж╕ржкрж╛рждрж╛рж▓рзЗ ржпрж╛ржи
тАв ржЬрж░рзБрж░рж┐ ржмрж┐ржнрж╛ржЧрзЗ ржпрзЛржЧрж╛ржпрзЛржЧ ржХрж░рзБржи
тАв рж╢рзНржмрж╛рж╕ржпржирзНрждрзНрж░рзЗрж░ ржорж╛рж╕рзНржХ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи
тАв ржЕржирзНржпржжрзЗрж░ ржерзЗржХрзЗ ржжрзВрж░рждрзНржм ржмржЬрж╛ржпрж╝ рж░рж╛ржЦрзБржи

ржмрж┐ржкржЬрзНржЬржиржХ рж▓ржХрзНрж╖ржгрж╕ржорзВрж╣:
{', '.join(assessment['emergency_symptoms'])}

ржпржХрзНрж╖рзНржорж╛ ржПржХржЯрж┐ рж╕ржВржХрзНрж░рж╛ржоржХ рж░рзЛржЧ рждрж╛ржЗ ржЕржирзНржпржжрзЗрж░ рж╕рзБрж░ржХрзНрж╖рж╛рж░ ржЬржирзНржп рж╕рждрж░рзНржХрждрж╛ ржЕржмрж▓ржорзНржмржи ржХрж░рзБржиред""",
            "disclaimer": self.tb_constants.BENGALI_TB_DISCLAIMERS["emergency"],
            "confidence": f"{assessment['confidence']*100:.0f}%"
        }
    
    def _generate_high_suspicion_response_bengali(self, assessment: Dict, symptoms: List[str]) -> Dict[str, str]:
        """Generate high suspicion response in Bengali."""
        return {
            "severity": "high_suspicion",
            "title": "тЪая╕П ржпржХрзНрж╖рзНржорж╛рж░ ржЙржЪрзНржЪ рж╕ржорзНржнрж╛ржмржирж╛",
            "message": f"""ржЖржкржирж╛рж░ рж▓ржХрзНрж╖ржгржЧрзБрж▓рж┐ ржпржХрзНрж╖рзНржорж╛рж░ ржкрзНрж░ржмрж▓ рж╕ржорзНржнрж╛ржмржирж╛ ржирж┐рж░рзНржжрзЗрж╢ ржХрж░рзЗред

тЪая╕П ржЬрж░рзБрж░рж┐ ржкржжржХрзНрж╖рзЗржк:
тАв ржЖржЧрж╛ржорзА рзирзк ржШржирзНржЯрж╛рж░ ржоржзрзНржпрзЗ ржбрж╛ржХрзНрждрж╛рж░ ржжрзЗржЦрж╛ржи
тАв ржХржл ржкрж░рзАржХрзНрж╖рж╛ (рж╕рзНржкрзБржЯрж╛ржо ржЯрзЗрж╕рзНржЯ) ржХрж░рж╛ржи
тАв ржмрзБржХрзЗрж░ ржПржХрзНрж╕-рж░рзЗ ржХрж░рж╛ржи
тАв ржкрж╛рж░рж┐ржмрж╛рж░рж┐ржХ рж╕ржжрж╕рзНржпржжрзЗрж░ ржкрж░рзАржХрзНрж╖рж╛ ржХрж░рж╛ржи

ржкрзНрж░ржмрж▓ рж╕ржирзНржжрзЗрж╣ржЬржиржХ рж▓ржХрзНрж╖ржгрж╕ржорзВрж╣:
{', '.join(assessment['warning_symptoms'])}

ЁЯФ╕ рж╕ржВржХрзНрж░ржоржг ржкрзНрж░рждрж┐рж░рзЛржзрзЗ:
тАв ржХрж╛рж╢рж┐рж░ рж╕ржоржпрж╝ ржорзБржЦ ржврзЗржХрзЗ рж░рж╛ржЦрзБржи
тАв ржкрж░рзНржпрж╛ржкрзНржд ржмрж╛ржпрж╝рзБ ржЪрж▓рж╛ржЪрж▓ржпрзБржХрзНржд ржЬрж╛ржпрж╝ржЧрж╛ржпрж╝ ржерж╛ржХрзБржи
тАв ржЕржирзНржпржжрзЗрж░ ржХрж╛ржЫ ржерзЗржХрзЗ ржжрзВрж░рждрзНржм ржмржЬрж╛ржпрж╝ рж░рж╛ржЦрзБржи""",
            "disclaimer": self.tb_constants.BENGALI_TB_DISCLAIMERS["warning"],
            "confidence": f"{assessment['confidence']*100:.0f}%"
        }
    
    def _generate_suspected_response_bengali(self, assessment: Dict, symptoms: List[str]) -> Dict[str, str]:
        """Generate suspected TB response in Bengali."""
        return {
            "severity": "suspected",
            "title": "ЁЯй║ ржпржХрзНрж╖рзНржорж╛рж░ рж╕ржирзНржжрзЗрж╣ржЬржиржХ рж▓ржХрзНрж╖ржг",
            "message": f"""ржЖржкржирж╛рж░ рж▓ржХрзНрж╖ржгржЧрзБрж▓рж┐ ржпржХрзНрж╖рзНржорж╛рж░ рж╕рж╛ржерзЗ рж╕рж╛ржоржЮрзНржЬрж╕рзНржпржкрзВрж░рзНржгред

ЁЯУЛ ржкрж░рж╛ржорж░рзНрж╢:
тАв рзи-рзй ржжрж┐ржирзЗрж░ ржоржзрзНржпрзЗ ржбрж╛ржХрзНрждрж╛рж░ ржжрзЗржЦрж╛ржи
тАв ржХржл ржкрж░рзАржХрзНрж╖рж╛ ржХрж░рж╛ржи (рзй ржжрж┐ржи ржкрж░ ржкрж░)
тАв ржмрзБржХрзЗрж░ ржПржХрзНрж╕-рж░рзЗ ржХрж░рж╛ржи
тАв ржЯрж┐ржЙржмрж╛рж░ржХрзБрж▓рж┐ржи рж╕рзНржХрж┐ржи ржЯрзЗрж╕рзНржЯ (TST) ржХрж░рж╛ржи

рж╕ржирзНржжрзЗрж╣ржЬржиржХ рж▓ржХрзНрж╖ржгрж╕ржорзВрж╣:
{', '.join(assessment['warning_symptoms'] + assessment['early_symptoms'])}

ЁЯФ╕ рж╕рж╛ржмржзрж╛ржирждрж╛:
тАв ржпржХрзНрж╖рзНржорж╛ ржирж┐рж╢рзНржЪрж┐ржд ржирж╛ рж╣ржУржпрж╝рж╛ ржкрж░рзНржпржирзНржд рж╕рждрж░рзНржХрждрж╛ ржЕржмрж▓ржорзНржмржи ржХрж░рзБржи
тАв ржкрзБрж╖рзНржЯрж┐ржХрж░ ржЦрж╛ржмрж╛рж░ ржЦрж╛ржи ржПржмржВ ржкрж░рзНржпрж╛ржкрзНржд ржмрж┐рж╢рзНрж░рж╛ржо ржирж┐ржи
тАв ржзрзВржоржкрж╛ржи ржУ ржоржжрзНржпржкрж╛ржи ржПржбрж╝рж┐ржпрж╝рзЗ ржЪрж▓рзБржи""",
            "disclaimer": self.tb_constants.BENGALI_TB_DISCLAIMERS["warning"],
            "confidence": f"{assessment['confidence']*100:.0f}%"
        }
    
    def _generate_possible_response_bengali(self, assessment: Dict, symptoms: List[str]) -> Dict[str, str]:
        """Generate possible TB response in Bengali."""
        return {
            "severity": "possible",
            "title": "ЁЯдФ ржпржХрзНрж╖рзНржорж╛рж░ рж╕ржорзНржнрж╛ржмрзНржп рж▓ржХрзНрж╖ржг",
            "message": f"""ржЖржкржирж╛рж░ рж▓ржХрзНрж╖ржгржЧрзБрж▓рж┐ ржпржХрзНрж╖рзНржорж╛рж░ ржкрзНрж░рж╛ржержорж┐ржХ ржкрж░рзНржпрж╛ржпрж╝рзЗрж░ рж╣рждрзЗ ржкрж╛рж░рзЗред

ЁЯТб ржкрж░рж╛ржорж░рзНрж╢:
тАв ржПржХ рж╕ржкрзНрждрж╛рж╣рзЗрж░ ржоржзрзНржпрзЗ ржбрж╛ржХрзНрждрж╛рж░ ржжрзЗржЦрж╛ржи
тАв рж▓ржХрзНрж╖ржг ржЙржирзНржирждрж┐ ржирж╛ рж╣рж▓рзЗ ржХржл ржкрж░рзАржХрзНрж╖рж╛ ржХрж░рж╛ржи
тАв рж╕рзНржмрж╛рж╕рзНржерзНржпржХрж░ ржЬрзАржмржиржпрж╛рждрзНрж░рж╛ ржмржЬрж╛ржпрж╝ рж░рж╛ржЦрзБржи

ржмрж░рзНрждржорж╛ржи рж▓ржХрзНрж╖ржгрж╕ржорзВрж╣:
{', '.join(assessment['early_symptoms'])}

ЁЯФ╕ ржирж┐рж░рзАржХрзНрж╖ржг ржХрж░рзБржи:
тАв ржХрж╛рж╢рж┐ рзй рж╕ржкрзНрждрж╛рж╣рзЗрж░ ржмрзЗрж╢рж┐ ржерж╛ржХрж▓рзЗ ржЕржмрж╢рзНржпржЗ ржбрж╛ржХрзНрждрж╛рж░ ржжрзЗржЦрж╛ржи
тАв ржУржЬржи ржХржорждрзЗ ржерж╛ржХрж▓рзЗ рж╕рждрж░рзНржХ рж╣ржи
тАв рж░рж╛рждрзЗрж░ ржШрж╛ржо ржмрж╛ржбрж╝рж▓рзЗ ржЪрж┐ржХрж┐рзОрж╕рж╛ ржирж┐ржи""",
            "disclaimer": self.tb_constants.BENGALI_TB_DISCLAIMERS["general"],
            "confidence": f"{assessment['confidence']*100:.0f}%"
        }
    
    def _generate_monitor_response_bengali(self, assessment: Dict, symptoms: List[str]) -> Dict[str, str]:
        """Generate monitoring response in Bengali."""
        return {
            "severity": "monitor",
            "title": "ЁЯСБя╕П рж▓ржХрзНрж╖ржг ржкрж░рзНржпржмрзЗржХрзНрж╖ржг ржХрж░рзБржи",
            "message": f"""ржЖржкржирж╛рж░ ржЙрж▓рзНрж▓рзЗржЦрж┐ржд рж▓ржХрзНрж╖ржгржЧрзБрж▓рж┐ ржирж┐рж░рзАржХрзНрж╖ржг ржкрзНрж░ржпрж╝рзЛржЬржиред

ЁЯУК ржкрж░рзНржпржмрзЗржХрзНрж╖ржг ржХрж░рзБржи:
тАв рж▓ржХрзНрж╖ржгржЧрзБрж▓рж┐ ржХрждржжрж┐ржи рж╕рзНржерж╛ржпрж╝рзА рж╣ржЪрзНржЫрзЗ
тАв рж▓ржХрзНрж╖ржг ржЦрж╛рж░рж╛ржк рж╣ржЪрзНржЫрзЗ ржирж╛ржХрж┐ ржнрж╛рж▓рзЛ рж╣ржЪрзНржЫрзЗ
тАв ржирждрзБржи ржХрзЛржирзЛ рж▓ржХрзНрж╖ржг ржпрзЛржЧ рж╣ржЪрзНржЫрзЗ ржХрж┐ржирж╛

ржмрж░рзНрждржорж╛ржи рж▓ржХрзНрж╖ржг: {', '.join(symptoms)}

тЪая╕П рж╕рждрж░рзНржХрждрж╛ - ржПржЗ рж▓ржХрзНрж╖ржгржЧрзБрж▓рж┐ ржжрзЗржЦрж╛ ржжрж┐рж▓рзЗ рждрж╛рзОржХрзНрж╖ржгрж┐ржХ ржбрж╛ржХрзНрждрж╛рж░ ржжрзЗржЦрж╛ржи:
тАв рзй рж╕ржкрзНрждрж╛рж╣рзЗрж░ ржмрзЗрж╢рж┐ ржХрж╛рж╢рж┐
тАв ржХржлрзЗ рж░ржХрзНржд
тАв ржжрзНрж░рзБржд ржУржЬржи ржХржорж╛
тАв рждрзАржмрзНрж░ рж░рж╛рждрзЗрж░ ржШрж╛ржо
тАв рж╢рзНржмрж╛рж╕ржХрж╖рзНржЯ""",
            "disclaimer": self.tb_constants.BENGALI_TB_DISCLAIMERS["general"],
            "confidence": f"{assessment['confidence']*100:.0f}%"
        }
    
    def _generate_general_response_bengali(self, assessment: Dict, symptoms: List[str]) -> Dict[str, str]:
        """Generate general health response in Bengali."""
        return {
            "severity": "general",
            "title": "ЁЯПе рж╕рзНржмрж╛рж╕рзНржерзНржп рж╕ржВржХрзНрж░рж╛ржирзНржд ржкрж░рж╛ржорж░рзНрж╢",
            "message": f"""ржЖржкржирж╛рж░ ржЙрж▓рзНрж▓рзЗржЦрж┐ржд рж▓ржХрзНрж╖ржгржЧрзБрж▓рж┐ ржмрж┐ржнрж┐ржирзНржи ржХрж╛рж░ржгрзЗ рж╣рждрзЗ ржкрж╛рж░рзЗред

ЁЯТб рж╕рж╛ржзрж╛рж░ржг ржкрж░рж╛ржорж░рзНрж╢:
тАв ржкрж░рзНржпрж╛ржкрзНржд ржмрж┐рж╢рзНрж░рж╛ржо ржирж┐ржи
тАв ржкрзБрж╖рзНржЯрж┐ржХрж░ ржЦрж╛ржмрж╛рж░ ржЦрж╛ржи
тАв ржкрзНрж░ржЪрзБрж░ рждрж░рж▓ ржЦрж╛ржмрж╛рж░ ржЦрж╛ржи
тАв рж▓ржХрзНрж╖ржг ржЕржмрзНржпрж╛рж╣ржд ржерж╛ржХрж▓рзЗ ржбрж╛ржХрзНрждрж╛рж░ ржжрзЗржЦрж╛ржи

ржмрж░рзНрждржорж╛ржи рж▓ржХрзНрж╖ржгрж╕ржорзВрж╣: {', '.join(symptoms)}

ЁЯФ╕ ржпржХрзНрж╖рзНржорж╛рж░ ржЭрзБржБржХрж┐ ржХржорж╛ржирзЛрж░ ржЙржкрж╛ржпрж╝:
тАв рж╕рзБрж╖ржо ржЦрж╛ржжрзНржп ржЧрзНрж░рж╣ржг ржХрж░рзБржи
тАв ржирж┐ржпрж╝ржорж┐ржд ржмрзНржпрж╛ржпрж╝рж╛ржо ржХрж░рзБржи
тАв ржзрзВржоржкрж╛ржи рждрзНржпрж╛ржЧ ржХрж░рзБржи
тАв ржнрж╛рж▓рзЛ ржмрж╛ржпрж╝рзБ ржЪрж▓рж╛ржЪрж▓ржпрзБржХрзНржд ржкрж░рж┐ржмрзЗрж╢рзЗ ржерж╛ржХрзБржи""",
            "disclaimer": self.tb_constants.BENGALI_TB_DISCLAIMERS["general"],
            "confidence": f"{assessment['confidence']*100:.0f}%"
        }

    def check_tuberculosis_symptoms_bengali(self, bengali_query: str) -> Dict[str, any]:
        """Main function to check tuberculosis symptoms from Bengali text."""
        
        # Validate input
        if not bengali_query or not bengali_query.strip():
            return {
                "error": "ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржЖржкржирж╛рж░ рж▓ржХрзНрж╖ржгржЧрзБрж▓рж┐ ржмрж░рзНржгржирж╛ ржХрж░рзБржи",
                "language": "bengali"
            }
        
        # Detect language
        language = self.detect_language(bengali_query)
        if language != "bengali":
            return {
                "error": "ржжржпрж╝рж╛ ржХрж░рзЗ ржмрж╛ржВрж▓рж╛ржпрж╝ ржЖржкржирж╛рж░ рж▓ржХрзНрж╖ржгржЧрзБрж▓рж┐ рж▓рж┐ржЦрзБржи",
                "language": language
            }
        
        try:
            # Extract symptoms
            symptoms = self.extract_tb_symptoms(bengali_query)
            
            if not symptoms:
                return {
                    "severity": "unclear",
                    "title": "ЁЯдФ рж▓ржХрзНрж╖ржг рж╕рзНржкрж╖рзНржЯ ржиржпрж╝",
                    "message": "ржЖржкржирж╛рж░ ржмрж░рзНржгржирж╛ ржерзЗржХрзЗ рж╕рзНржкрж╖рзНржЯ рж▓ржХрзНрж╖ржг ржмрзБржЭрждрзЗ ржкрж╛рж░рж┐ржирж┐ред ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржЖрж░ржУ ржмрж┐рж╕рзНрждрж╛рж░рж┐ржд ржмрж▓рзБржиред",
                    "disclaimer": self.tb_constants.BENGALI_TB_DISCLAIMERS["general"],
                    "symptoms": [],
                    "confidence": "0%"
                }
            
            # Assess severity
            assessment = self.assess_tb_severity(symptoms)
            
            # Generate response
            response = self.generate_bengali_response(assessment, symptoms)
            
            # Add metadata
            response.update({
                "symptoms": symptoms,
                "language": "bengali",
                "timestamp": datetime.now().isoformat(),
                "total_symptoms_found": len(symptoms)
            })
            
            logger.info(f"Processed Bengali TB query: {len(symptoms)} symptoms found, severity: {assessment['severity']}")
            
            return response
            
        except Exception as e:
            logger.error(f"Error processing Bengali TB query: {e}")
            return {
                "error": "ржкрзНрж░ржХрзНрж░рж┐ржпрж╝рж╛ржХрж░ржгрзЗ рж╕ржорж╕рзНржпрж╛ рж╣ржпрж╝рзЗржЫрзЗред ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред",
                "language": "bengali"
            }

class HindiTuberculosisChecker:
    """Hindi language tuberculosis symptom checker with medical safety protocols."""
    
    def __init__(self):
        self.tb_constants = TuberculosisConstants()
        self.query_processor = MedicalQueryProcessor()
    
    def detect_language(self, text: str) -> str:
        """Detect if the text is in Hindi language."""
        hindi_chars = set('рдЕрдЖрдЗрдИрдЙрдКрдЛрдПрдРрдУрдФрдХрдЦрдЧрдШрдЩрдЪрдЫрдЬрдЭрдЮрдЯрдардбрдврдгрддрдерджрдзрдирдкрдлрдмрднрдордпрд░рд▓рд╡рд╢рд╖рд╕рд╣')
        text_chars = set(text)
        hindi_count = len(text_chars.intersection(hindi_chars))
        total_chars = len([c for c in text if c.isalpha()])
        
        if total_chars == 0:
            return "unknown"
        
        hindi_ratio = hindi_count / total_chars
        return "hindi" if hindi_ratio > 0.3 else "other"
    
    def extract_tb_symptoms(self, hindi_text: str) -> List[str]:
        """Extract tuberculosis symptoms from Hindi text."""
        symptoms_found = []
        text_lower = hindi_text.lower()
        
        for hindi_symptom, english_symptom in self.tb_constants.HINDI_TB_SYMPTOMS.items():
            if hindi_symptom in text_lower:
                symptoms_found.append(english_symptom)
                logger.info(f"Found TB symptom: {hindi_symptom} -> {english_symptom}")
        
        return list(set(symptoms_found))
    
    def assess_tb_severity(self, symptoms: List[str]) -> Dict[str, any]:
        """Assess the severity level of tuberculosis symptoms."""
        emergency_count = 0
        warning_count = 0
        early_count = 0
        
        emergency_symptoms = []
        warning_symptoms = []
        early_symptoms = []
        
        for symptom in symptoms:
            if symptom in self.tb_constants.EMERGENCY_SYMPTOMS:
                emergency_count += 1
                emergency_symptoms.append(symptom)
            elif symptom in self.tb_constants.WARNING_SYMPTOMS:
                warning_count += 1
                warning_symptoms.append(symptom)
            elif symptom in self.tb_constants.EARLY_SYMPTOMS:
                early_count += 1
                early_symptoms.append(symptom)
        
        # Determine severity level - TB specific logic
        if emergency_count > 0:
            severity = "emergency"
            confidence = 0.95
        elif warning_count >= 3 or (warning_count >= 2 and early_count >= 1):
            severity = "high_suspicion"
            confidence = 0.85
        elif warning_count >= 2 or (warning_count >= 1 and early_count >= 2):
            severity = "suspected"
            confidence = 0.75
        elif early_count >= 3 or (early_count >= 2 and "persistent cough" in symptoms):
            severity = "possible"
            confidence = 0.65
        elif early_count >= 1:
            severity = "monitor"
            confidence = 0.45
        else:
            severity = "unclear"
            confidence = 0.30
        
        return {
            "severity": severity,
            "confidence": confidence,
            "emergency_symptoms": emergency_symptoms,
            "warning_symptoms": warning_symptoms,
            "early_symptoms": early_symptoms,
            "total_symptoms": len(symptoms)
        }
    
    def generate_hindi_response(self, assessment: Dict[str, any], symptoms: List[str]) -> Dict[str, str]:
        """Generate appropriate Hindi response based on assessment."""
        severity = assessment["severity"]
        
        if severity == "emergency":
            response = self._generate_emergency_response_hindi(assessment, symptoms)
        elif severity == "high_suspicion":
            response = self._generate_high_suspicion_response_hindi(assessment, symptoms)
        elif severity == "suspected":
            response = self._generate_suspected_response_hindi(assessment, symptoms)
        elif severity == "possible":
            response = self._generate_possible_response_hindi(assessment, symptoms)
        elif severity == "monitor":
            response = self._generate_monitor_response_hindi(assessment, symptoms)
        else:
            response = self._generate_general_response_hindi(assessment, symptoms)
        
        return response
    
    def _generate_emergency_response_hindi(self, assessment: Dict, symptoms: List[str]) -> Dict[str, str]:
        """Generate emergency response in Hindi."""
        return {
            "severity": "emergency",
            "title": "ЁЯЪи рддрддреНрдХрд╛рд▓ рдЪрд┐рдХрд┐рддреНрд╕рд╛ рд╕рд╣рд╛рдпрддрд╛ рдЖрд╡рд╢реНрдпрдХ",
            "message": f"""рдЖрдкрдХреЗ рдмрддрд╛рдП рдЧрдП рд▓рдХреНрд╖рдг рдЧрдВрднреАрд░ рдЯреАрдмреА рдпрд╛ рдЬрдЯрд┐рд▓рддрд╛рдУрдВ рдХрд╛ рд╕рдВрдХреЗрдд рджреЗ рд░рд╣реЗ рд╣реИрдВред

ЁЯЪи рддреБрд░рдВрдд рдХрд░реЗрдВ:
тАв рдирдЬрджреАрдХреА рдЕрд╕реНрдкрддрд╛рд▓ рдЬрд╛рдПрдВ
тАв рдЗрдорд░рдЬреЗрдВрд╕реА рд╡рд┐рднрд╛рдЧ рд╕реЗ рд╕рдВрдкрд░реНрдХ рдХрд░реЗрдВ
тАв рд╕рд╛рдВрд╕ рдХреА рдорд╛рд╕реНрдХ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ
тАв рджреВрд╕рд░реЛрдВ рд╕реЗ рджреВрд░реА рдмрдирд╛рдП рд░рдЦреЗрдВ

рдЦрддрд░рдирд╛рдХ рд▓рдХреНрд╖рдг:
{', '.join(assessment['emergency_symptoms'])}

рдЯреАрдмреА рдПрдХ рд╕рдВрдХреНрд░рд╛рдордХ рдмреАрдорд╛рд░реА рд╣реИ рдЗрд╕рд▓рд┐рдП рджреВрд╕рд░реЛрдВ рдХреА рд╕реБрд░рдХреНрд╖рд╛ рдХреЗ рд▓рд┐рдП рд╕рд╛рд╡рдзрд╛рдиреА рдмрд░рддреЗрдВред""",
            "disclaimer": self.tb_constants.HINDI_TB_DISCLAIMERS["emergency"],
            "confidence": f"{assessment['confidence']*100:.0f}%"
        }
    
    def _generate_high_suspicion_response_hindi(self, assessment: Dict, symptoms: List[str]) -> Dict[str, str]:
        """Generate high suspicion response in Hindi."""
        return {
            "severity": "high_suspicion",
            "title": "тЪая╕П рдЯреАрдмреА рдХреА рдЙрдЪреНрдЪ рд╕рдВрднрд╛рд╡рдирд╛",
            "message": f"""рдЖрдкрдХреЗ рд▓рдХреНрд╖рдг рдЯреАрдмреА рдХреА рдкреНрд░рдмрд▓ рд╕рдВрднрд╛рд╡рдирд╛ рджрд░реНрд╢рд╛рддреЗ рд╣реИрдВред

тЪая╕П рдЬрд░реВрд░реА рдХрджрдо:
тАв рдЕрдЧрд▓реЗ 24 рдШрдВрдЯреЛрдВ рдореЗрдВ рдбреЙрдХреНрдЯрд░ рд╕реЗ рдорд┐рд▓реЗрдВ
тАв рдХрдл рдХреА рдЬрд╛рдВрдЪ (рд╕реНрдкреВрдЯрдо рдЯреЗрд╕реНрдЯ) рдХрд░рд╛рдПрдВ
тАв рдЫрд╛рддреА рдХрд╛ рдПрдХреНрд╕-рд░реЗ рдХрд░рд╛рдПрдВ
тАв рдкрд░рд┐рд╡рд╛рд░рдЬрдиреЛрдВ рдХреА рдЬрд╛рдВрдЪ рдХрд░рд╛рдПрдВ

рдкреНрд░рдмрд▓ рд╕рдВрджреЗрд╣ рдХреЗ рд▓рдХреНрд╖рдг:
{', '.join(assessment['warning_symptoms'])}

ЁЯФ╕ рд╕рдВрдХреНрд░рдордг рд░реЛрдХрдерд╛рдо рдХреЗ рд▓рд┐рдП:
тАв рдЦрд╛рдВрд╕рддреЗ рд╕рдордп рдореБрдВрд╣ рдврдХреЗрдВ
тАв рдкрд░реНрдпрд╛рдкреНрдд рд╣рд╡рд╛ рдЖрдиреЗ-рдЬрд╛рдиреЗ рд╡рд╛рд▓реА рдЬрдЧрд╣ рд░рд╣реЗрдВ
тАв рджреВрд╕рд░реЛрдВ рд╕реЗ рджреВрд░реА рдмрдирд╛рдП рд░рдЦреЗрдВ""",
            "disclaimer": self.tb_constants.HINDI_TB_DISCLAIMERS["warning"],
            "confidence": f"{assessment['confidence']*100:.0f}%"
        }
    
    def _generate_suspected_response_hindi(self, assessment: Dict, symptoms: List[str]) -> Dict[str, str]:
        """Generate suspected TB response in Hindi."""
        return {
            "severity": "suspected",
            "title": "ЁЯй║ рдЯреАрдмреА рдХреЗ рд╕рдВрджрд┐рдЧреНрдз рд▓рдХреНрд╖рдг",
            "message": f"""рдЖрдкрдХреЗ рд▓рдХреНрд╖рдг рдЯреАрдмреА рд╕реЗ рдореЗрд▓ рдЦрд╛рддреЗ рд╣реИрдВред

ЁЯУЛ рд╕рд▓рд╛рд╣:
тАв 2-3 рджрд┐рди рдореЗрдВ рдбреЙрдХреНрдЯрд░ рд╕реЗ рдорд┐рд▓реЗрдВ
тАв рдХрдл рдХреА рдЬрд╛рдВрдЪ рдХрд░рд╛рдПрдВ (3 рджрд┐рди рдЕрд▓рдЧ-рдЕрд▓рдЧ)
тАв рдЫрд╛рддреА рдХрд╛ рдПрдХреНрд╕-рд░реЗ рдХрд░рд╛рдПрдВ
тАв рдЯреНрдпреВрдмрд░рдХреБрд▓рд┐рди рд╕реНрдХрд┐рди рдЯреЗрд╕реНрдЯ (TST) рдХрд░рд╛рдПрдВ

рд╕рдВрджрд┐рдЧреНрдз рд▓рдХреНрд╖рдг:
{', '.join(assessment['warning_symptoms'] + assessment['early_symptoms'])}

ЁЯФ╕ рд╕рд╛рд╡рдзрд╛рдиреА:
тАв рдЯреАрдмреА рдХреА рдкреБрд╖реНрдЯрд┐ рди рд╣реЛрдиреЗ рддрдХ рд╕рддрд░реНрдХрддрд╛ рдмрд░рддреЗрдВ
тАв рдкреМрд╖реНрдЯрд┐рдХ рднреЛрдЬрди рд▓реЗрдВ рдФрд░ рдкрд░реНрдпрд╛рдкреНрдд рдЖрд░рд╛рдо рдХрд░реЗрдВ
тАв рдзреВрдореНрд░рдкрд╛рди рдФрд░ рд╢рд░рд╛рдм рд╕реЗ рдмрдЪреЗрдВ""",
            "disclaimer": self.tb_constants.HINDI_TB_DISCLAIMERS["warning"],
            "confidence": f"{assessment['confidence']*100:.0f}%"
        }
    
    def _generate_possible_response_hindi(self, assessment: Dict, symptoms: List[str]) -> Dict[str, str]:
        """Generate possible TB response in Hindi."""
        return {
            "severity": "possible",
            "title": "ЁЯдФ рдЯреАрдмреА рдХреЗ рд╕рдВрднрд╛рд╡рд┐рдд рд▓рдХреНрд╖рдг",
            "message": f"""рдЖрдкрдХреЗ рд▓рдХреНрд╖рдг рдЯреАрдмреА рдХреА рдкреНрд░рд╛рд░рдВрднрд┐рдХ рдЕрд╡рд╕реНрдерд╛ рдХреЗ рд╣реЛ рд╕рдХрддреЗ рд╣реИрдВред

ЁЯТб рд╕рд▓рд╛рд╣:
тАв рдПрдХ рд╕рдкреНрддрд╛рд╣ рдореЗрдВ рдбреЙрдХреНрдЯрд░ рд╕реЗ рдорд┐рд▓реЗрдВ
тАв рд▓рдХреНрд╖рдг рдореЗрдВ рд╕реБрдзрд╛рд░ рди рд╣реЛ рддреЛ рдХрдл рдХреА рдЬрд╛рдВрдЪ рдХрд░рд╛рдПрдВ
тАв рд╕реНрд╡рд╕реНрде рдЬреАрд╡рдирд╢реИрд▓реА рдмрдирд╛рдП рд░рдЦреЗрдВ

рд╡рд░реНрддрдорд╛рди рд▓рдХреНрд╖рдг:
{', '.join(assessment['early_symptoms'])}

ЁЯФ╕ рдирд┐рдЧрд░рд╛рдиреА рдХрд░реЗрдВ:
тАв рдЦрд╛рдВрд╕реА 3 рд╕рдкреНрддрд╛рд╣ рд╕реЗ рдЬреНрдпрд╛рджрд╛ рд╣реЛ рддреЛ рдбреЙрдХреНрдЯрд░ рджрд┐рдЦрд╛рдПрдВ
тАв рд╡рдЬрди рдХрдо рд╣реЛ рд░рд╣рд╛ рд╣реЛ рддреЛ рд╕рдЪреЗрдд рд░рд╣реЗрдВ
тАв рд░рд╛рдд рдореЗрдВ рдкрд╕реАрдирд╛ рдмрдврд╝реЗ рддреЛ рдЗрд▓рд╛рдЬ рд▓реЗрдВ""",
            "disclaimer": self.tb_constants.HINDI_TB_DISCLAIMERS["general"],
            "confidence": f"{assessment['confidence']*100:.0f}%"
        }
    
    def _generate_monitor_response_hindi(self, assessment: Dict, symptoms: List[str]) -> Dict[str, str]:
        """Generate monitoring response in Hindi."""
        return {
            "severity": "monitor",
            "title": "ЁЯСБя╕П рд▓рдХреНрд╖рдгреЛрдВ рдкрд░ рдирдЬрд░ рд░рдЦреЗрдВ",
            "message": f"""рдЖрдкрдХреЗ рдмрддрд╛рдП рдЧрдП рд▓рдХреНрд╖рдгреЛрдВ рдХреА рдирд┐рдЧрд░рд╛рдиреА рдЖрд╡рд╢реНрдпрдХ рд╣реИред

ЁЯУК рдирд┐рдЧрд░рд╛рдиреА рдХрд░реЗрдВ:
тАв рд▓рдХреНрд╖рдг рдХрд┐рддрдиреЗ рджрд┐рдиреЛрдВ рд╕реЗ рд╣реИрдВ
тАв рд▓рдХреНрд╖рдг рдмрд┐рдЧрдбрд╝ рд░рд╣реЗ рд╣реИрдВ рдпрд╛ рд╕реБрдзрд░ рд░рд╣реЗ рд╣реИрдВ
тАв рдирдП рд▓рдХреНрд╖рдг рдЬреБрдбрд╝ рд░рд╣реЗ рд╣реИрдВ рдпрд╛ рдирд╣реАрдВ

рд╡рд░реНрддрдорд╛рди рд▓рдХреНрд╖рдг: {', '.join(symptoms)}

тЪая╕П рд╕рд╛рд╡рдзрд╛рдиреА - рдпреЗ рд▓рдХреНрд╖рдг рджрд┐рдЦреЗрдВ рддреЛ рддреБрд░рдВрдд рдбреЙрдХреНрдЯрд░ рджрд┐рдЦрд╛рдПрдВ:
тАв 3 рд╕рдкреНрддрд╛рд╣ рд╕реЗ рдЬреНрдпрд╛рджрд╛ рдЦрд╛рдВрд╕реА
тАв рдХрдл рдореЗрдВ рдЦреВрди
тАв рддреЗрдЬреА рд╕реЗ рд╡рдЬрди рдХрдо рд╣реЛрдирд╛
тАв рддреАрд╡реНрд░ рд░рд╛рдд рдХрд╛ рдкрд╕реАрдирд╛
тАв рд╕рд╛рдВрд╕ рдлреВрд▓рдирд╛""",
            "disclaimer": self.tb_constants.HINDI_TB_DISCLAIMERS["general"],
            "confidence": f"{assessment['confidence']*100:.0f}%"
        }
    
    def _generate_general_response_hindi(self, assessment: Dict, symptoms: List[str]) -> Dict[str, str]:
        """Generate general health response in Hindi."""
        return {
            "severity": "general",
            "title": "ЁЯПе рд╕реНрд╡рд╛рд╕реНрдереНрдп рд╕рдВрдмрдВрдзреА рд╕рд▓рд╛рд╣",
            "message": f"""рдЖрдкрдХреЗ рдмрддрд╛рдП рдЧрдП рд▓рдХреНрд╖рдг рд╡рд┐рднрд┐рдиреНрди рдХрд╛рд░рдгреЛрдВ рд╕реЗ рд╣реЛ рд╕рдХрддреЗ рд╣реИрдВред

ЁЯТб рд╕рд╛рдорд╛рдиреНрдп рд╕рд▓рд╛рд╣:
тАв рдкрд░реНрдпрд╛рдкреНрдд рдЖрд░рд╛рдо рдХрд░реЗрдВ
тАв рдкреМрд╖реНрдЯрд┐рдХ рднреЛрдЬрди рд▓реЗрдВ
тАв рднрд░рдкреВрд░ рддрд░рд▓ рдкрджрд╛рд░реНрде рд▓реЗрдВ
тАв рд▓рдХреНрд╖рдг рдмрдиреЗ рд░рд╣реЗрдВ рддреЛ рдбреЙрдХреНрдЯрд░ рд╕реЗ рдорд┐рд▓реЗрдВ

рд╡рд░реНрддрдорд╛рди рд▓рдХреНрд╖рдг: {', '.join(symptoms)}

ЁЯФ╕ рдЯреАрдмреА рдХрд╛ рдЦрддрд░рд╛ рдХрдо рдХрд░рдиреЗ рдХреЗ рддрд░реАрдХреЗ:
тАв рд╕рдВрддреБрд▓рд┐рдд рдЖрд╣рд╛рд░ рд▓реЗрдВ
тАв рдирд┐рдпрдорд┐рдд рд╡реНрдпрд╛рдпрд╛рдо рдХрд░реЗрдВ
тАв рдзреВрдореНрд░рдкрд╛рди рдЫреЛрдбрд╝реЗрдВ
тАв рдЕрдЪреНрдЫреА рд╣рд╡рд╛ рд╡рд╛рд▓реЗ рдорд╛рд╣реМрд▓ рдореЗрдВ рд░рд╣реЗрдВ""",
            "disclaimer": self.tb_constants.HINDI_TB_DISCLAIMERS["general"],
            "confidence": f"{assessment['confidence']*100:.0f}%"
        }

    def check_tuberculosis_symptoms_hindi(self, hindi_query: str) -> Dict[str, any]:
        """Main function to check tuberculosis symptoms from Hindi text."""
        
        # Validate input
        if not hindi_query or not hindi_query.strip():
            return {
                "error": "рдХреГрдкрдпрд╛ рдЕрдкрдиреЗ рд▓рдХреНрд╖рдгреЛрдВ рдХрд╛ рд╡рд░реНрдгрди рдХрд░реЗрдВ",
                "language": "hindi"
            }
        
        # Detect language
        language = self.detect_language(hindi_query)
        if language != "hindi":
            return {
                "error": "рдХреГрдкрдпрд╛ рд╣рд┐рдВрджреА рдореЗрдВ рдЕрдкрдиреЗ рд▓рдХреНрд╖рдг рд▓рд┐рдЦреЗрдВ",
                "language": language
            }
        
        try:
            # Extract symptoms
            symptoms = self.extract_tb_symptoms(hindi_query)
            
            if not symptoms:
                return {
                    "severity": "unclear",
                    "title": "ЁЯдФ рд▓рдХреНрд╖рдг рд╕реНрдкрд╖реНрдЯ рдирд╣реАрдВ",
                    "message": "рдЖрдкрдХреЗ рд╡рд┐рд╡рд░рдг рд╕реЗ рд╕реНрдкрд╖реНрдЯ рд▓рдХреНрд╖рдг рд╕рдордЭ рдирд╣реАрдВ рдЖрдПред рдХреГрдкрдпрд╛ рдФрд░ рд╡рд┐рд╕реНрддрд╛рд░ рд╕реЗ рдмрддрд╛рдПрдВред",
                    "disclaimer": self.tb_constants.HINDI_TB_DISCLAIMERS["general"],
                    "symptoms": [],
                    "confidence": "0%"
                }
            
            # Assess severity
            assessment = self.assess_tb_severity(symptoms)
            
            # Generate response
            response = self.generate_hindi_response(assessment, symptoms)
            
            # Add metadata
            response.update({
                "symptoms": symptoms,
                "language": "hindi",
                "timestamp": datetime.now().isoformat(),
                "total_symptoms_found": len(symptoms)
            })
            
            logger.info(f"Processed Hindi TB query: {len(symptoms)} symptoms found, severity: {assessment['severity']}")
            
            return response
            
        except Exception as e:
            logger.error(f"Error processing Hindi TB query: {e}")
            return {
                "error": "рдкреНрд░рд╕рдВрд╕реНрдХрд░рдг рдореЗрдВ рд╕рдорд╕реНрдпрд╛ рд╣реБрдИред рдХреГрдкрдпрд╛ рдлрд┐рд░ рд╕реЗ рдХреЛрд╢рд┐рд╢ рдХрд░реЗрдВред",
                "language": "hindi"
            }
#!/usr/bin/env python3
"""
Bengali Dengue Symptom Checker Module

This module provides specialized functionality for checking dengue symptoms 
in Bengali language, with appropriate medical guidance and safety measures.
"""

import re
from typing import Dict, List, Set, Tuple, Optional
from datetime import datetime
import logging

from config.medical_constants import DengueConstants
from src.rag_system.query_processor import MedicalQueryProcessor

logger = logging.getLogger(__name__)

class BengaliDengueChecker:
    """Bengali language dengue symptom checker with medical safety protocols."""
    
    def __init__(self):
        self.dengue_constants = DengueConstants()
        self.query_processor = MedicalQueryProcessor()
        
    def detect_language(self, text: str) -> str:
        """Detect if the text is in Bengali language."""
        bengali_chars = set('ржЕржЖржЗржИржЙржКржЛржПржРржУржФржХржЦржЧржШржЩржЪржЫржЬржЭржЮржЯржаржбржвржгрждржержжржзржиржкржлржмржнржоржпрж░рж▓рж╢рж╖рж╕рж╣ржбрж╝ржврж╝ржпрж╝рзОржВ')
        text_chars = set(text)
        bengali_count = len(text_chars.intersection(bengali_chars))
        total_chars = len([c for c in text if c.isalpha()])
        
        if total_chars == 0:
            return "unknown"
        
        bengali_ratio = bengali_count / total_chars
        return "bengali" if bengali_ratio > 0.3 else "other"
    
    def extract_dengue_symptoms(self, bengali_text: str) -> List[str]:
        """Extract dengue symptoms from Bengali text."""
        symptoms_found = []
        text_lower = bengali_text.lower()
        
        for bengali_symptom, english_symptom in self.dengue_constants.BENGALI_DENGUE_SYMPTOMS.items():
            if bengali_symptom in text_lower:
                symptoms_found.append(english_symptom)
                logger.info(f"Found symptom: {bengali_symptom} -> {english_symptom}")
        
        return list(set(symptoms_found))
    
    def assess_severity(self, symptoms: List[str]) -> Dict[str, any]:
        """Assess the severity level of dengue symptoms."""
        emergency_count = 0
        warning_count = 0
        early_count = 0
        
        emergency_symptoms = []
        warning_symptoms = []
        early_symptoms = []
        
        for symptom in symptoms:
            if symptom in self.dengue_constants.EMERGENCY_SYMPTOMS:
                emergency_count += 1
                emergency_symptoms.append(symptom)
            elif symptom in self.dengue_constants.WARNING_SYMPTOMS:
                warning_count += 1
                warning_symptoms.append(symptom)
            elif symptom in self.dengue_constants.EARLY_SYMPTOMS:
                early_count += 1
                early_symptoms.append(symptom)
        
        # Determine severity level
        if emergency_count > 0:
            severity = "emergency"
            confidence = 0.95
        elif warning_count >= 2:
            severity = "warning"
            confidence = 0.85
        elif warning_count >= 1 and early_count >= 2:
            severity = "warning"
            confidence = 0.80
        elif early_count >= 3:
            severity = "suspected"
            confidence = 0.70
        elif early_count >= 2:
            severity = "possible"
            confidence = 0.60
        else:
            severity = "unclear"
            confidence = 0.40
        
        return {
            "severity": severity,
            "confidence": confidence,
            "emergency_symptoms": emergency_symptoms,
            "warning_symptoms": warning_symptoms,
            "early_symptoms": early_symptoms,
            "total_symptoms": len(symptoms)
        }
    
    def generate_bengali_response(self, assessment: Dict[str, any], symptoms: List[str]) -> Dict[str, str]:
        """Generate appropriate Bengali response based on assessment."""
        severity = assessment["severity"]
        
        if severity == "emergency":
            response = self._generate_emergency_response_bengali(assessment, symptoms)
        elif severity == "warning":
            response = self._generate_warning_response_bengali(assessment, symptoms)
        elif severity in ["suspected", "possible"]:
            response = self._generate_suspected_response_bengali(assessment, symptoms)
        else:
            response = self._generate_general_response_bengali(assessment, symptoms)
        
        return response
    
    def _generate_emergency_response_bengali(self, assessment: Dict, symptoms: List[str]) -> Dict[str, str]:
        """Generate emergency response in Bengali."""
        return {
            "severity": "emergency",
            "title": "ЁЯЪи ржЬрж░рзБрж░рж┐ ржЪрж┐ржХрж┐рзОрж╕рж╛ ржкрзНрж░ржпрж╝рзЛржЬржи",
            "message": f"""ржЖржкржирж╛рж░ ржмрж░рзНржгрж┐ржд рж▓ржХрзНрж╖ржгржЧрзБрж▓рж┐ ржбрзЗржЩрзНржЧрзБ ржЬрзНржмрж░рзЗрж░ ржЧрзБрж░рзБрждрж░ ржкрж░рзНржпрж╛ржпрж╝рзЗрж░ ржЗржЩрзНржЧрж┐ржд ржжрж┐ржЪрзНржЫрзЗред

ЁЯЪи рждрж╛рзОржХрзНрж╖ржгрж┐ржХ ржХрж░ржгрзАржпрж╝:
тАв ржЕржмрж┐рж▓ржорзНржмрзЗ ржирж┐ржХржЯрж╕рзНрже рж╣рж╛рж╕ржкрж╛рждрж╛рж▓рзЗ ржпрж╛ржи
тАв ржЬрж░рзБрж░рж┐ ржмрж┐ржнрж╛ржЧрзЗ ржпрзЛржЧрж╛ржпрзЛржЧ ржХрж░рзБржи
тАв ржЪрж┐ржХрж┐рзОрж╕рж╛ржпрж╝ ржмрж┐рж▓ржорзНржм ржХрж░ржмрзЗржи ржирж╛

ржмрж┐ржкржЬрзНржЬржиржХ рж▓ржХрзНрж╖ржгрж╕ржорзВрж╣:
{', '.join(assessment['emergency_symptoms'])}

ржЖрждрзНржорзАржпрж╝рж╕рзНржмржЬржиржХрзЗ рж╕рж╛ржерзЗ ржирж┐ржпрж╝рзЗ ржпрж╛ржи ржПржмржВ рж░рзЛржЧрзАрж░ ржЕржмрж╕рзНржерж╛ ржирж┐ржпрж╝ржорж┐ржд ржкрж░рзНржпржмрзЗржХрзНрж╖ржг ржХрж░рзБржиред""",
            "disclaimer": self.dengue_constants.BENGALI_DENGUE_DISCLAIMERS["emergency"],
            "confidence": f"{assessment['confidence']*100:.0f}%"
        }
    
    def _generate_warning_response_bengali(self, assessment: Dict, symptoms: List[str]) -> Dict[str, str]:
        """Generate warning response in Bengali."""
        return {
            "severity": "warning", 
            "title": "тЪая╕П ржбрзЗржЩрзНржЧрзБ ржЬрзНржмрж░рзЗрж░ рж╕рждрж░рзНржХрждрж╛ржорзВрж▓ржХ рж▓ржХрзНрж╖ржг",
            "message": f"""ржЖржкржирж╛рж░ рж▓ржХрзНрж╖ржгржЧрзБрж▓рж┐ ржбрзЗржЩрзНржЧрзБ ржЬрзНржмрж░рзЗрж░ рж╕рждрж░рзНржХрждрж╛ржорзВрж▓ржХ ржкрж░рзНржпрж╛ржпрж╝рзЗрж░ ржЗржЩрзНржЧрж┐ржд ржжрж┐ржЪрзНржЫрзЗред

тЪая╕П ржЬрж░рзБрж░рж┐ ржкржжржХрзНрж╖рзЗржк:
тАв ржЖржЧрж╛ржорзА рзирзк ржШржирзНржЯрж╛рж░ ржоржзрзНржпрзЗ ржбрж╛ржХрзНрждрж╛рж░ ржжрзЗржЦрж╛ржи
тАв рж░ржХрзНржд ржкрж░рзАржХрзНрж╖рж╛ ржХрж░рж╛ржи (ржкрзНрж▓рзЗржЯрж▓рзЗржЯ ржХрж╛ржЙржирзНржЯ)
тАв ржкрзНрж░ржЪрзБрж░ ржкрж╛ржирж┐ ржУ рждрж░рж▓ ржЦрж╛ржмрж╛рж░ ржЦрж╛ржи
тАв ржкрзВрж░рзНржг ржмрж┐рж╢рзНрж░рж╛ржо ржирж┐ржи

рж╕рждрж░рзНржХрждрж╛ржорзВрж▓ржХ рж▓ржХрзНрж╖ржгрж╕ржорзВрж╣:
{', '.join(assessment['warning_symptoms'])}

рж▓ржХрзНрж╖ржг ржЖрж░ржУ ржЦрж╛рж░рж╛ржк рж╣рж▓рзЗ ржЕржмрж┐рж▓ржорзНржмрзЗ рж╣рж╛рж╕ржкрж╛рждрж╛рж▓рзЗ ржпрж╛ржиред""",
            "disclaimer": self.dengue_constants.BENGALI_DENGUE_DISCLAIMERS["warning"],
            "confidence": f"{assessment['confidence']*100:.0f}%"
        }
    
    def _generate_suspected_response_bengali(self, assessment: Dict, symptoms: List[str]) -> Dict[str, str]:
        """Generate suspected dengue response in Bengali."""
        return {
            "severity": "suspected",
            "title": "ЁЯй║ ржбрзЗржЩрзНржЧрзБ ржЬрзНржмрж░рзЗрж░ рж╕ржорзНржнрж╛ржмрзНржп рж▓ржХрзНрж╖ржг",
            "message": f"""ржЖржкржирж╛рж░ рж▓ржХрзНрж╖ржгржЧрзБрж▓рж┐ ржбрзЗржЩрзНржЧрзБ ржЬрзНржмрж░рзЗрж░ ржкрзНрж░рж╛ржержорж┐ржХ ржкрж░рзНржпрж╛ржпрж╝рзЗрж░ рж╕рж╛ржерзЗ рж╕рж╛ржоржЮрзНржЬрж╕рзНржпржкрзВрж░рзНржгред

ЁЯУЛ ржкрж░рж╛ржорж░рзНрж╢:
тАв рзи-рзй ржжрж┐ржирзЗрж░ ржоржзрзНржпрзЗ ржбрж╛ржХрзНрждрж╛рж░ ржжрзЗржЦрж╛ржи
тАв ржбрзЗржЩрзНржЧрзБ ржПржиржПрж╕рзз ржЯрзЗрж╕рзНржЯ ржХрж░рж╛ржи
тАв ржЬрзНржмрж░ ржХржорж╛ржирзЛрж░ ржЬржирзНржп ржкрзНржпрж╛рж░рж╛рж╕рж┐ржЯрж╛ржорж▓ ржЦрж╛ржи
тАв ржЕрзНржпрж╛рж╕ржкрж┐рж░рж┐ржи ржПржмржВ ржЖржЗржмрзБржкрзНрж░рзЛржлрзЗржи ржПржбрж╝рж┐ржпрж╝рзЗ ржЪрж▓рзБржи

ржкрзНрж░рж╛ржержорж┐ржХ рж▓ржХрзНрж╖ржгрж╕ржорзВрж╣:
{', '.join(assessment['early_symptoms'])}

ЁЯЪи ржПржЗ рж▓ржХрзНрж╖ржгржЧрзБрж▓рж┐ ржжрзЗржЦрж╛ ржжрж┐рж▓рзЗ рждрж╛рзОржХрзНрж╖ржгрж┐ржХ рж╣рж╛рж╕ржкрж╛рждрж╛рж▓рзЗ ржпрж╛ржи:
тАв ржирж╛ржХ ржмрж╛ ржорж╛ржбрж╝рж┐ ржжрж┐ржпрж╝рзЗ рж░ржХрзНржд ржкржбрж╝рж╛
тАв ржХрзНрж░ржорж╛ржЧржд ржмржорж┐
тАв рждрзАржмрзНрж░ ржкрзЗржЯрзЗрж░ ржмрзНржпржерж╛
тАв рж╢рзНржмрж╛рж╕ржХрж╖рзНржЯ""",
            "disclaimer": self.dengue_constants.BENGALI_DENGUE_DISCLAIMERS["general"],
            "confidence": f"{assessment['confidence']*100:.0f}%"
        }
    
    def _generate_general_response_bengali(self, assessment: Dict, symptoms: List[str]) -> Dict[str, str]:
        """Generate general health response in Bengali."""
        return {
            "severity": "general",
            "title": "ЁЯПе рж╕рзНржмрж╛рж╕рзНржерзНржп рж╕ржВржХрзНрж░рж╛ржирзНржд ржкрж░рж╛ржорж░рзНрж╢",
            "message": f"""ржЖржкржирж╛рж░ ржЙрж▓рзНрж▓рзЗржЦрж┐ржд рж▓ржХрзНрж╖ржгржЧрзБрж▓рж┐ ржмрж┐ржнрж┐ржирзНржи ржХрж╛рж░ржгрзЗ рж╣рждрзЗ ржкрж╛рж░рзЗред

ЁЯТб рж╕рж╛ржзрж╛рж░ржг ржкрж░рж╛ржорж░рзНрж╢:
тАв ржкрж░рзНржпрж╛ржкрзНржд ржмрж┐рж╢рзНрж░рж╛ржо ржирж┐ржи
тАв ржкрзНрж░ржЪрзБрж░ рждрж░рж▓ ржЦрж╛ржмрж╛рж░ ржЦрж╛ржи
тАв ржЬрзНржмрж░ ржерж╛ржХрж▓рзЗ ржкрзНржпрж╛рж░рж╛рж╕рж┐ржЯрж╛ржорж▓ ржЦрж╛ржи
тАв рж▓ржХрзНрж╖ржг ржЕржмрзНржпрж╛рж╣ржд ржерж╛ржХрж▓рзЗ ржбрж╛ржХрзНрждрж╛рж░ ржжрзЗржЦрж╛ржи

ржмрж░рзНрждржорж╛ржи рж▓ржХрзНрж╖ржгрж╕ржорзВрж╣: {', '.join(symptoms)}

ржпржжрж┐ ржирж┐ржорзНржирж▓рж┐ржЦрж┐ржд рж▓ржХрзНрж╖ржгржЧрзБрж▓рж┐ ржжрзЗржЦрж╛ ржжрзЗржпрж╝ рждрж╛рж╣рж▓рзЗ ржЕржмрж┐рж▓ржорзНржмрзЗ ржЪрж┐ржХрж┐рзОрж╕рж╛ рж╕рзЗржмрж╛ ржирж┐ржи:
тАв рждрзАржмрзНрж░ ржЬрзНржмрж░ (рззрзжрзи┬░F ржПрж░ ржЙржкрж░рзЗ)
тАв рждрзАржмрзНрж░ ржорж╛ржерж╛ржмрзНржпржерж╛ ржУ ржЪрзЛржЦрзЗрж░ ржмрзНржпржерж╛
тАв рж░ржХрзНрждржХрзНрж╖рж░ржгрзЗрж░ ржХрзЛржирзЛ рж▓ржХрзНрж╖ржг""",
            "disclaimer": self.dengue_constants.BENGALI_DENGUE_DISCLAIMERS["general"],
            "confidence": f"{assessment['confidence']*100:.0f}%"
        }

    def check_dengue_symptoms_bengali(self, bengali_query: str) -> Dict[str, any]:
        """Main function to check dengue symptoms from Bengali text."""
        
        # Validate input
        if not bengali_query or not bengali_query.strip():
            return {
                "error": "ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржЖржкржирж╛рж░ рж▓ржХрзНрж╖ржгржЧрзБрж▓рж┐ ржмрж░рзНржгржирж╛ ржХрж░рзБржи",
                "language": "bengali"
            }
        
        # Detect language
        language = self.detect_language(bengali_query)
        if language != "bengali":
            return {
                "error": "ржжржпрж╝рж╛ ржХрж░рзЗ ржмрж╛ржВрж▓рж╛ржпрж╝ ржЖржкржирж╛рж░ рж▓ржХрзНрж╖ржгржЧрзБрж▓рж┐ рж▓рж┐ржЦрзБржи",
                "language": language
            }
        
        try:
            # Extract symptoms
            symptoms = self.extract_dengue_symptoms(bengali_query)
            
            if not symptoms:
                return {
                    "severity": "unclear",
                    "title": "ЁЯдФ рж▓ржХрзНрж╖ржг рж╕рзНржкрж╖рзНржЯ ржиржпрж╝",
                    "message": "ржЖржкржирж╛рж░ ржмрж░рзНржгржирж╛ ржерзЗржХрзЗ рж╕рзНржкрж╖рзНржЯ рж▓ржХрзНрж╖ржг ржмрзБржЭрждрзЗ ржкрж╛рж░рж┐ржирж┐ред ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржЖрж░ржУ ржмрж┐рж╕рзНрждрж╛рж░рж┐ржд ржмрж▓рзБржиред",
                    "disclaimer": self.dengue_constants.BENGALI_DENGUE_DISCLAIMERS["general"],
                    "symptoms": [],
                    "confidence": "0%"
                }
            
            # Assess severity
            assessment = self.assess_severity(symptoms)
            
            # Generate response
            response = self.generate_bengali_response(assessment, symptoms)
            
            # Add metadata
            response.update({
                "symptoms": symptoms,
                "language": "bengali",
                "timestamp": datetime.now().isoformat(),
                "total_symptoms_found": len(symptoms)
            })
            
            logger.info(f"Processed Bengali dengue query: {len(symptoms)} symptoms found, severity: {assessment['severity']}")
            
            return response
            
        except Exception as e:
            logger.error(f"Error processing Bengali dengue query: {e}")
            return {
                "error": "ржкрзНрж░ржХрзНрж░рж┐ржпрж╝рж╛ржХрж░ржгрзЗ рж╕ржорж╕рзНржпрж╛ рж╣ржпрж╝рзЗржЫрзЗред ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред",
                "language": "bengali"
            }

class HindiDengueChecker:
    """Hindi language dengue symptom checker with medical safety protocols."""
    
    def __init__(self):
        self.dengue_constants = DengueConstants()
        self.query_processor = MedicalQueryProcessor()
    
    def detect_language(self, text: str) -> str:
        """Detect if the text is in Hindi language."""
        hindi_chars = set('рдЕрдЖрдЗрдИрдЙрдКрдЛрдПрдРрдУрдФрдХрдЦрдЧрдШрдЩрдЪрдЫрдЬрдЭрдЮрдЯрдардбрдврдгрддрдерджрдзрдирдкрдлрдмрднрдордпрд░рд▓рд╡рд╢рд╖рд╕рд╣')
        text_chars = set(text)
        hindi_count = len(text_chars.intersection(hindi_chars))
        total_chars = len([c for c in text if c.isalpha()])
        
        if total_chars == 0:
            return "unknown"
        
        hindi_ratio = hindi_count / total_chars
        return "hindi" if hindi_ratio > 0.3 else "other"
    
    def extract_dengue_symptoms(self, hindi_text: str) -> List[str]:
        """Extract dengue symptoms from Hindi text."""
        symptoms_found = []
        text_lower = hindi_text.lower()
        
        for hindi_symptom, english_symptom in self.dengue_constants.HINDI_DENGUE_SYMPTOMS.items():
            if hindi_symptom in text_lower:
                symptoms_found.append(english_symptom)
                logger.info(f"Found symptom: {hindi_symptom} -> {english_symptom}")
        
        return list(set(symptoms_found))
    
    def assess_severity(self, symptoms: List[str]) -> Dict[str, any]:
        """Assess the severity level of dengue symptoms."""
        emergency_count = 0
        warning_count = 0
        early_count = 0
        
        emergency_symptoms = []
        warning_symptoms = []
        early_symptoms = []
        
        for symptom in symptoms:
            if symptom in self.dengue_constants.EMERGENCY_SYMPTOMS:
                emergency_count += 1
                emergency_symptoms.append(symptom)
            elif symptom in self.dengue_constants.WARNING_SYMPTOMS:
                warning_count += 1
                warning_symptoms.append(symptom)
            elif symptom in self.dengue_constants.EARLY_SYMPTOMS:
                early_count += 1
                early_symptoms.append(symptom)
        
        # Determine severity level
        if emergency_count > 0:
            severity = "emergency"
            confidence = 0.95
        elif warning_count >= 2:
            severity = "warning"
            confidence = 0.85
        elif warning_count >= 1 and early_count >= 2:
            severity = "warning"
            confidence = 0.80
        elif early_count >= 3:
            severity = "suspected"
            confidence = 0.70
        elif early_count >= 2:
            severity = "possible"
            confidence = 0.60
        else:
            severity = "unclear"
            confidence = 0.40
        
        return {
            "severity": severity,
            "confidence": confidence,
            "emergency_symptoms": emergency_symptoms,
            "warning_symptoms": warning_symptoms,
            "early_symptoms": early_symptoms,
            "total_symptoms": len(symptoms)
        }
    
    def generate_hindi_response(self, assessment: Dict[str, any], symptoms: List[str]) -> Dict[str, str]:
        """Generate appropriate Hindi response based on assessment."""
        severity = assessment["severity"]
        
        if severity == "emergency":
            response = self._generate_emergency_response_hindi(assessment, symptoms)
        elif severity == "warning":
            response = self._generate_warning_response_hindi(assessment, symptoms)
        elif severity in ["suspected", "possible"]:
            response = self._generate_suspected_response_hindi(assessment, symptoms)
        else:
            response = self._generate_general_response_hindi(assessment, symptoms)
        
        return response
    
    def _generate_emergency_response_hindi(self, assessment: Dict, symptoms: List[str]) -> Dict[str, str]:
        """Generate emergency response in Hindi."""
        return {
            "severity": "emergency",
            "title": "ЁЯЪи рддрддреНрдХрд╛рд▓ рдЪрд┐рдХрд┐рддреНрд╕рд╛ рд╕рд╣рд╛рдпрддрд╛ рдЖрд╡рд╢реНрдпрдХ",
            "message": f"""рдЖрдкрдХреЗ рдмрддрд╛рдП рдЧрдП рд▓рдХреНрд╖рдг рдбреЗрдВрдЧреВ рдмреБрдЦрд╛рд░ рдХреА рдЧрдВрднреАрд░ рдЕрд╡рд╕реНрдерд╛ рдХрд╛ рд╕рдВрдХреЗрдд рджреЗ рд░рд╣реЗ рд╣реИрдВред

ЁЯЪи рддреБрд░рдВрдд рдХрд░реЗрдВ:
тАв рдирдЬрджреАрдХреА рдЕрд╕реНрдкрддрд╛рд▓ рдЬрд╛рдПрдВ
тАв рдЗрдорд░рдЬреЗрдВрд╕реА рд╡рд┐рднрд╛рдЧ рд╕реЗ рд╕рдВрдкрд░реНрдХ рдХрд░реЗрдВ
тАв рдЗрд▓рд╛рдЬ рдореЗрдВ рджреЗрд░реА рди рдХрд░реЗрдВ

рдЦрддрд░рдирд╛рдХ рд▓рдХреНрд╖рдг:
{', '.join(assessment['emergency_symptoms'])}

рдкрд░рд┐рд╡рд╛рд░рдЬрдиреЛрдВ рдХреЛ рд╕рд╛рде рд▓реЗрдХрд░ рдЬрд╛рдПрдВ рдФрд░ рдорд░реАрдЬ рдХреА рд╕реНрдерд┐рддрд┐ рдкрд░ рд▓рдЧрд╛рддрд╛рд░ рдирдЬрд░ рд░рдЦреЗрдВред""",
            "disclaimer": self.dengue_constants.HINDI_DENGUE_DISCLAIMERS["emergency"],
            "confidence": f"{assessment['confidence']*100:.0f}%"
        }
    
    def _generate_warning_response_hindi(self, assessment: Dict, symptoms: List[str]) -> Dict[str, str]:
        """Generate warning response in Hindi."""
        return {
            "severity": "warning",
            "title": "тЪая╕П рдбреЗрдВрдЧреВ рдмреБрдЦрд╛рд░ рдХреЗ рдЪреЗрддрд╛рд╡рдиреА рд╕рдВрдХреЗрдд",
            "message": f"""рдЖрдкрдХреЗ рд▓рдХреНрд╖рдг рдбреЗрдВрдЧреВ рдмреБрдЦрд╛рд░ рдХреА рдЪреЗрддрд╛рд╡рдиреА рдЕрд╡рд╕реНрдерд╛ рдХрд╛ рд╕рдВрдХреЗрдд рджреЗ рд░рд╣реЗ рд╣реИрдВред

тЪая╕П рдЬрд░реВрд░реА рдХрджрдо:
тАв рдЕрдЧрд▓реЗ 24 рдШрдВрдЯреЛрдВ рдореЗрдВ рдбреЙрдХреНрдЯрд░ рд╕реЗ рдорд┐рд▓реЗрдВ
тАв рдЦреВрди рдХреА рдЬрд╛рдВрдЪ рдХрд░рд╛рдПрдВ (рдкреНрд▓реЗрдЯрд▓реЗрдЯ рдХрд╛рдЙрдВрдЯ)
тАв рднрд░рдкреВрд░ рдкрд╛рдиреА рдФрд░ рддрд░рд▓ рдкрджрд╛рд░реНрде рд▓реЗрдВ
тАв рдкреВрд░реНрдг рдЖрд░рд╛рдо рдХрд░реЗрдВ

рдЪреЗрддрд╛рд╡рдиреА рдХреЗ рд▓рдХреНрд╖рдг:
{', '.join(assessment['warning_symptoms'])}

рд▓рдХреНрд╖рдг рдФрд░ рдмрд┐рдЧрдбрд╝рдиреЗ рдкрд░ рддреБрд░рдВрдд рдЕрд╕реНрдкрддрд╛рд▓ рдЬрд╛рдПрдВред""",
            "disclaimer": self.dengue_constants.HINDI_DENGUE_DISCLAIMERS["warning"],
            "confidence": f"{assessment['confidence']*100:.0f}%"
        }
    
    def _generate_suspected_response_hindi(self, assessment: Dict, symptoms: List[str]) -> Dict[str, str]:
        """Generate suspected dengue response in Hindi."""
        return {
            "severity": "suspected",
            "title": "ЁЯй║ рдбреЗрдВрдЧреВ рдмреБрдЦрд╛рд░ рдХреЗ рд╕рдВрднрд╛рд╡рд┐рдд рд▓рдХреНрд╖рдг",
            "message": f"""рдЖрдкрдХреЗ рд▓рдХреНрд╖рдг рдбреЗрдВрдЧреВ рдмреБрдЦрд╛рд░ рдХреА рдкреНрд░рд╛рд░рдВрднрд┐рдХ рдЕрд╡рд╕реНрдерд╛ рд╕реЗ рдореЗрд▓ рдЦрд╛рддреЗ рд╣реИрдВред

ЁЯУЛ рд╕рд▓рд╛рд╣:
тАв 2-3 рджрд┐рди рдореЗрдВ рдбреЙрдХреНрдЯрд░ рд╕реЗ рдорд┐рд▓реЗрдВ
тАв рдбреЗрдВрдЧреВ NS1 рдЯреЗрд╕реНрдЯ рдХрд░рд╛рдПрдВ
тАв рдмреБрдЦрд╛рд░ рдХреЗ рд▓рд┐рдП рдкреИрд░рд╛рд╕рд┐рдЯрд╛рдореЛрд▓ рд▓реЗрдВ
тАв рдПрд╕реНрдкрд┐рд░рд┐рди рдФрд░ рдЖрдЗрдмреБрдкреНрд░реЛрдлреЗрди рд╕реЗ рдмрдЪреЗрдВ

рдкреНрд░рд╛рд░рдВрднрд┐рдХ рд▓рдХреНрд╖рдг:
{', '.join(assessment['early_symptoms'])}

ЁЯЪи рдпреЗ рд▓рдХреНрд╖рдг рджрд┐рдЦреЗрдВ рддреЛ рддреБрд░рдВрдд рдЕрд╕реНрдкрддрд╛рд▓ рдЬрд╛рдПрдВ:
тАв рдирд╛рдХ рдпрд╛ рдорд╕реВрдбрд╝реЛрдВ рд╕реЗ рдЦреВрди рдЖрдирд╛
тАв рд▓рдЧрд╛рддрд╛рд░ рдЙрд▓реНрдЯреА
тАв рддреЗрдЬ рдкреЗрдЯ рджрд░реНрдж
тАв рд╕рд╛рдВрд╕ рд▓реЗрдиреЗ рдореЗрдВ рддрдХрд▓реАрдл""",
            "disclaimer": self.dengue_constants.HINDI_DENGUE_DISCLAIMERS["general"],
            "confidence": f"{assessment['confidence']*100:.0f}%"
        }
    
    def _generate_general_response_hindi(self, assessment: Dict, symptoms: List[str]) -> Dict[str, str]:
        """Generate general health response in Hindi."""
        return {
            "severity": "general",
            "title": "ЁЯПе рд╕реНрд╡рд╛рд╕реНрдереНрдп рд╕рдВрдмрдВрдзреА рд╕рд▓рд╛рд╣",
            "message": f"""рдЖрдкрдХреЗ рдмрддрд╛рдП рдЧрдП рд▓рдХреНрд╖рдг рд╡рд┐рднрд┐рдиреНрди рдХрд╛рд░рдгреЛрдВ рд╕реЗ рд╣реЛ рд╕рдХрддреЗ рд╣реИрдВред

ЁЯТб рд╕рд╛рдорд╛рдиреНрдп рд╕рд▓рд╛рд╣:
тАв рдкрд░реНрдпрд╛рдкреНрдд рдЖрд░рд╛рдо рдХрд░реЗрдВ
тАв рднрд░рдкреВрд░ рддрд░рд▓ рдкрджрд╛рд░реНрде рд▓реЗрдВ
тАв рдмреБрдЦрд╛рд░ рд╣реЛ рддреЛ рдкреИрд░рд╛рд╕рд┐рдЯрд╛рдореЛрд▓ рд▓реЗрдВ
тАв рд▓рдХреНрд╖рдг рдмрдиреЗ рд░рд╣реЗрдВ рддреЛ рдбреЙрдХреНрдЯрд░ рд╕реЗ рдорд┐рд▓реЗрдВ

рд╡рд░реНрддрдорд╛рди рд▓рдХреНрд╖рдг: {', '.join(symptoms)}

рдпрджрд┐ рдирд┐рдореНрдирд▓рд┐рдЦрд┐рдд рд▓рдХреНрд╖рдг рджрд┐рдЦреЗрдВ рддреЛ рддреБрд░рдВрдд рдЪрд┐рдХрд┐рддреНрд╕рд╛ рд╕рд╣рд╛рдпрддрд╛ рд▓реЗрдВ:
тАв рддреЗрдЬ рдмреБрдЦрд╛рд░ (102┬░F рд╕реЗ рдКрдкрд░)
тАв рддреАрд╡реНрд░ рд╕рд┐рд░ рджрд░реНрдж рдФрд░ рдЖрдВрдЦреЛрдВ рдореЗрдВ рджрд░реНрдж
тАв рдЦреВрди рдмрд╣рдиреЗ рдХреЗ рдХреЛрдИ рд╕рдВрдХреЗрдд""",
            "disclaimer": self.dengue_constants.HINDI_DENGUE_DISCLAIMERS["general"],
            "confidence": f"{assessment['confidence']*100:.0f}%"
        }

    def check_dengue_symptoms_hindi(self, hindi_query: str) -> Dict[str, any]:
        """Main function to check dengue symptoms from Hindi text."""
        
        # Validate input
        if not hindi_query or not hindi_query.strip():
            return {
                "error": "рдХреГрдкрдпрд╛ рдЕрдкрдиреЗ рд▓рдХреНрд╖рдгреЛрдВ рдХрд╛ рд╡рд░реНрдгрди рдХрд░реЗрдВ",
                "language": "hindi"
            }
        
        # Detect language
        language = self.detect_language(hindi_query)
        if language != "hindi":
            return {
                "error": "рдХреГрдкрдпрд╛ рд╣рд┐рдВрджреА рдореЗрдВ рдЕрдкрдиреЗ рд▓рдХреНрд╖рдг рд▓рд┐рдЦреЗрдВ",
                "language": language
            }
        
        try:
            # Extract symptoms
            symptoms = self.extract_dengue_symptoms(hindi_query)
            
            if not symptoms:
                return {
                    "severity": "unclear",
                    "title": "ЁЯдФ рд▓рдХреНрд╖рдг рд╕реНрдкрд╖реНрдЯ рдирд╣реАрдВ",
                    "message": "рдЖрдкрдХреЗ рд╡рд┐рд╡рд░рдг рд╕реЗ рд╕реНрдкрд╖реНрдЯ рд▓рдХреНрд╖рдг рд╕рдордЭ рдирд╣реАрдВ рдЖрдПред рдХреГрдкрдпрд╛ рдФрд░ рд╡рд┐рд╕реНрддрд╛рд░ рд╕реЗ рдмрддрд╛рдПрдВред",
                    "disclaimer": self.dengue_constants.HINDI_DENGUE_DISCLAIMERS["general"],
                    "symptoms": [],
                    "confidence": "0%"
                }
            
            # Assess severity
            assessment = self.assess_severity(symptoms)
            
            # Generate response
            response = self.generate_hindi_response(assessment, symptoms)
            
            # Add metadata
            response.update({
                "symptoms": symptoms,
                "language": "hindi",
                "timestamp": datetime.now().isoformat(),
                "total_symptoms_found": len(symptoms)
            })
            
            logger.info(f"Processed Hindi dengue query: {len(symptoms)} symptoms found, severity: {assessment['severity']}")
            
            return response
            
        except Exception as e:
            logger.error(f"Error processing Hindi dengue query: {e}")
            return {
                "error": "рдкреНрд░рд╕рдВрд╕реНрдХрд░рдг рдореЗрдВ рд╕рдорд╕реНрдпрд╛ рд╣реБрдИред рдХреГрдкрдпрд╛ рдлрд┐рд░ рд╕реЗ рдХреЛрд╢рд┐рд╢ рдХрд░реЗрдВред",
                "language": "hindi"
            }